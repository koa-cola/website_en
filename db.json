{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/github.png","path":"images/github.png","modified":1,"renderable":0},{"_id":"source/video/poster.png","path":"video/poster.png","modified":1,"renderable":0},{"_id":"themes/documentation/source/css/docs.scss","path":"css/docs.scss","modified":1,"renderable":1},{"_id":"source/video/koa-cola-dev.mp4","path":"video/koa-cola-dev.mp4","modified":1,"renderable":0}],"Cache":[{"_id":"source/api-models.md","hash":"d76d97c61ff2c5a6eb612921442a26b19aee6881","modified":1511339501675},{"_id":"source/api-controllers.md","hash":"cc9e0baaa72f415ceb018c99708f6a89ecea7bdc","modified":1527753058689},{"_id":"source/api-schemas.md","hash":"f703412395bb276886986d9148fa442d32102356","modified":1511427116845},{"_id":"source/api-responses.md","hash":"4070af7ba8a5c769f27c5ad433ed420f0b17deab","modified":1511245888898},{"_id":"source/api.md","hash":"b1ee9139de9cc02e2af9c074f766fe335a0eb4c4","modified":1511246764866},{"_id":"source/compare-next.md","hash":"32e866c3f6869ea098818618f623fbccfe23add4","modified":1527753085473},{"_id":"source/config.md","hash":"f95b1ff398ca5e18eacf1d5f76ff7f841bbb0f13","modified":1511339501675},{"_id":"source/d-mvc.md","hash":"8f8bcbe7e69c1e5e4a45fb5bca21fb5aa1b09ff6","modified":1527753172035},{"_id":"source/decorators.md","hash":"6d8072f4d6937db95a4fa72584517d261a6e7fd8","modified":1511427148077},{"_id":"source/index.md","hash":"9c7cefd4c7a4bd1f998ea37e07fe9706ea399efa","modified":1527753476460},{"_id":"source/installation.md","hash":"55bdc53ae6bbe1db98f2eb8191eed2c8caf5a6af","modified":1527753242818},{"_id":"source/public.md","hash":"095ecc3ce1eecc7cc3904949c534e1fcda8b65d2","modified":1511339875315},{"_id":"source/ssr.md","hash":"160664d5144d441a444b5e632580b80f0d28a3e8","modified":1511427168537},{"_id":"source/tip1-react-init.md","hash":"76e9031cea725def842e09e2f7c8c5fdf281d352","modified":1527753172035},{"_id":"source/tip2-redux.md","hash":"dcfeb7a1e665617ca942d557b9b9a75c04018af9","modified":1511427181946},{"_id":"source/tip3-inject-global.md","hash":"8a6f2f7e953145498318001778e2c17aa046bf07","modified":1511427181946},{"_id":"source/tip4-cluster.md","hash":"58b55796e646276dbc1e51ed5972eec2670e73fe","modified":1511427181946},{"_id":"source/tip6-compile.md","hash":"4cf1c56e4d1029f604c7898f618d90d36e22ab88","modified":1513567528469},{"_id":"source/tip5-debug.md","hash":"dc0a92e004a8061569412c38e6c856281eae6cb4","modified":1513567528469},{"_id":"source/universal.md","hash":"1ad1a0da0c2941645c07a4aa2bbe01e746e24af6","modified":1511427074863},{"_id":"source/views-app.md","hash":"bbfd4ef5a20e6d3d142106e69ba0b70380ef5c80","modified":1511427200679},{"_id":"source/views-pages.md","hash":"dfab6e6164cfa2341b39fad682613f14b183b5eb","modified":1511427216487},{"_id":"source/views-components.md","hash":"dea3704c2653b404ec32e89830a09419a56783f1","modified":1511427202980},{"_id":"themes/documentation/_config.yml","hash":"670d6f859f7f380466281ae4ca7028ad29469a72","modified":1463532894000},{"_id":"source/views.md","hash":"19703dbf0c21a019698ebdc5a0f4f18d4adf4ee1","modified":1511427218837},{"_id":"source/_data/nav.yml","hash":"5c31832469ec86f4acd86fc7b43b64e90b29300b","modified":1511426572280},{"_id":"source/css/github-markdown.css","hash":"018da55e2c6c85aa8550a51d4cfb790bfa2a729b","modified":1502441317876},{"_id":"source/images/github.png","hash":"fabe53eb72f9b6d3d47cd95aff31ffc45c2fdbf8","modified":1366004970000},{"_id":"source/video/poster.png","hash":"47191c937f2b10ec740fdfde851991d599da1124","modified":1502873284914},{"_id":"themes/documentation/layout/default.swig","hash":"3737897bd0316934d999c52ee200083f84c1b524","modified":1513903407598},{"_id":"source/cli.md","hash":"593ff5e12541b5e2e79ac4a9dd11de0659d15c23","modified":1527753522769},{"_id":"themes/documentation/source/css/_code.scss","hash":"944676c08a813c90778ce48a3daf23fb6f18ceea","modified":1463532894000},{"_id":"themes/documentation/source/css/_content.scss","hash":"fe27f2e6570b1d109ed84e4f8c7f87344e5c9eba","modified":1502444317138},{"_id":"themes/documentation/source/css/_menu.scss","hash":"a72ba17db23e59dc980e831df2246c015605e92a","modified":1463532894000},{"_id":"themes/documentation/source/css/_typography.scss","hash":"06ac832e3ae656ea47b818e7dc6524fcad71b241","modified":1463532894000},{"_id":"themes/documentation/source/css/docs.scss","hash":"c4185a629de88bd667ce25adaea31b5b1dca19c9","modified":1502443451184},{"_id":"source/video/koa-cola-dev.mp4","hash":"c9c8d3e79b5791ee2d04aae3bd3d59a2372e7791","modified":1502872178631},{"_id":"public/css/github-markdown.css","hash":"018da55e2c6c85aa8550a51d4cfb790bfa2a729b","modified":1527753540741},{"_id":"public/api-models.html","hash":"de76a6bafa5146e9df6a2c8521aa4823acabc1e5","modified":1527753540748},{"_id":"public/api-controllers.html","hash":"c914481092a811657893bf096863b41fb00aaf3a","modified":1527753540749},{"_id":"public/api-responses.html","hash":"b9ad06eb44b19b8224f753a41de52080f1581fca","modified":1527753540749},{"_id":"public/compare-next.html","hash":"ad20d76067def557616b7b6611968aca2bddd881","modified":1527753540749},{"_id":"public/api.html","hash":"e2251561cd055a678dab607087f0fa4ef7c2dfbd","modified":1527753540749},{"_id":"public/api-schemas.html","hash":"3f75547c7369340264187bb5cafe3050e8826571","modified":1527753540749},{"_id":"public/config.html","hash":"fe2af4f3db67460c5f357ccded21a49c6eae58d6","modified":1527753540749},{"_id":"public/installation.html","hash":"95d6f7957cdd28e821f04348ffa8036a1a24aabc","modified":1527753540749},{"_id":"public/public.html","hash":"fe64b968f56233a80decc6fe2d368352052ae0e1","modified":1527753540749},{"_id":"public/index.html","hash":"4fe69b600bc3d195e7e412937f588a8d102135b2","modified":1527753540749},{"_id":"public/tip4-cluster.html","hash":"a09f5e1921a311f8fb231238625e7e4fc57c482a","modified":1527753540749},{"_id":"public/ssr.html","hash":"ab6d2c5e135f8287a5e1e3b8139afc848e687e80","modified":1527753540750},{"_id":"public/tip2-redux.html","hash":"854e94a4b731f76276e9ad2218e47d84536a6acf","modified":1527753540750},{"_id":"public/tip3-inject-global.html","hash":"4ab2dfafd116a94d4a8e3155c33974f5891de3a5","modified":1527753540750},{"_id":"public/tip6-compile.html","hash":"246ec3bf67fa8876f3b2a87be58160626edff9ba","modified":1527753540750},{"_id":"public/tip5-debug.html","hash":"a10a5a94c5f8fa6817eeaf1cd93c7de6bbe96edb","modified":1527753540750},{"_id":"public/views-pages.html","hash":"912b2a0a737ff161f835c36e32118a35fc118a24","modified":1527753540750},{"_id":"public/views-app.html","hash":"792886f4649c3f57d11717947c53084cc274d8c8","modified":1527753540751},{"_id":"public/tip1-react-init.html","hash":"966e0ed1a35e853e19664434a156896ab74decf1","modified":1527753540751},{"_id":"public/views-components.html","hash":"2818e50c703be0d54ad81eb93d5ee9efe2bed470","modified":1527753540751},{"_id":"public/views.html","hash":"67a0c5aba669e9c980aec391fb04e72beab7b48c","modified":1527753540751},{"_id":"public/cli.html","hash":"5f282eb25c3bd46fb73703fe3f0632f86e547168","modified":1527753540751},{"_id":"public/d-mvc.html","hash":"634cb61564a860357acfa1d194bffc8becc22030","modified":1527753540751},{"_id":"public/decorators.html","hash":"428a43f0fa1b26e23f4e8f21cb288cc13bef21c1","modified":1527753540751},{"_id":"public/universal.html","hash":"69426dc2c77b9234db1972f09fa3621f082864b2","modified":1527753540751},{"_id":"public/images/github.png","hash":"fabe53eb72f9b6d3d47cd95aff31ffc45c2fdbf8","modified":1527753540754},{"_id":"public/video/poster.png","hash":"47191c937f2b10ec740fdfde851991d599da1124","modified":1527753540754},{"_id":"public/css/docs.scss","hash":"c4185a629de88bd667ce25adaea31b5b1dca19c9","modified":1527753540754},{"_id":"public/video/koa-cola-dev.mp4","hash":"c9c8d3e79b5791ee2d04aae3bd3d59a2372e7791","modified":1527753540788}],"Category":[],"Data":[{"_id":"nav","data":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}],"Page":[{"layout":"default","id":"api-models","title":"models","prev":"api-controllers.html","next":"api-schemas.html","_content":"\nThe folder that place the model layer. We can get the model by using `app.models.todos` at run time. any ORM or ODM model library is supported, as long as export the object.\n\nFor example, use mongoose：\n\n```javascript\nimport {model} from 'mongoose-decorators';\nconst todoSchema = new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n})\n@model(todoSchema)\nexport default class todos {}\n```\n\nIn addition to using the model decorator, we can also use other decorator of (mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators].\n\nWe can also just return the Object in normal way instead of using decorator:\n\n```javascript\nexport default app.mongoose.model('todos', new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n}))\n```","source":"api-models.md","raw":"---\nlayout: default\nid: api-models\ntitle: models\nprev: api-controllers.html\nnext: api-schemas.html\n---\n\nThe folder that place the model layer. We can get the model by using `app.models.todos` at run time. any ORM or ODM model library is supported, as long as export the object.\n\nFor example, use mongoose：\n\n```javascript\nimport {model} from 'mongoose-decorators';\nconst todoSchema = new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n})\n@model(todoSchema)\nexport default class todos {}\n```\n\nIn addition to using the model decorator, we can also use other decorator of (mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators].\n\nWe can also just return the Object in normal way instead of using decorator:\n\n```javascript\nexport default app.mongoose.model('todos', new app.mongoose.Schema({\n    name : String,\n    completed : Boolean\n}))\n```","date":"2017-11-22T08:31:41.675Z","updated":"2017-11-22T08:31:41.675Z","path":"api-models.html","comments":1,"_id":"cjhu90g8200005oiv4mrfmueu","content":"<p>The folder that place the model layer. We can get the model by using <code>app.models.todos</code> at run time. any ORM or ODM model library is supported, as long as export the object.</p>\n<p>For example, use mongoose：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;model&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mongoose-decorators'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> todoSchema = <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;)</div><div class=\"line\">@model(todoSchema)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">todos</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>In addition to using the model decorator, we can also use other decorator of (mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators].</p>\n<p>We can also just return the Object in normal way instead of using decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app.mongoose.model(<span class=\"string\">'todos'</span>, <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>The folder that place the model layer. We can get the model by using <code>app.models.todos</code> at run time. any ORM or ODM model library is supported, as long as export the object.</p>\n<p>For example, use mongoose：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;model&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mongoose-decorators'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> todoSchema = <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;)</div><div class=\"line\">@model(todoSchema)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">todos</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>In addition to using the model decorator, we can also use other decorator of (mongoose-decorators)[https://github.com/aksyonov/mongoose-decorators].</p>\n<p>We can also just return the Object in normal way instead of using decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app.mongoose.model(<span class=\"string\">'todos'</span>, <span class=\"keyword\">new</span> app.mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    completed : <span class=\"built_in\">Boolean</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>"},{"layout":"default","id":"api-controllers","title":"controllers","next":"api-models.html","_content":"\nThe controller directory holds the `controller` class, and the `controller` class define controller by decorator Controller from `require('koa-cola/client')`. and we can define the router and view by decorators as well, so We can design different controllers according to different production needs.\n\n## Controller that provides api interface\n\n```javascript\nconst { Controller, Get, Post, Body } = require('koa-cola/client');\n\n@Controller('')\nexport default class {\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n\n  \n  @Post('/todo/save')\n  async saveTodo(@Body() body) {\n    return await app.models.todo.save(body);\n  }\n}\n```\n\n### Return fixed data format by return of router\n\n```javascript\n  /**\n  data format:\n    [todoItem, ...]\n  */\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\nreturn a pre-define wrapper data format by using Response decorator\n```javascript\n  const Ok = function Ok(ctx, data){\n      ctx.status = 200;\n      if(data){\n          ctx.body = {\n              code : 200,\n              result : data\n          };\n      }\n  }\n  /**\n  return data format:\n  {\n      code : 200,\n      result : [todoItem, ...]\n  }\n  */\n  @Get('/todo/list')\n  @Response(Ok)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\n### Using `Use` decorator as middleware of router\n\n```javascript\n function isLogin(ctx, next){\n    if(ctx.state.user){\n        await next();\n    }else{\n        ctx.throw(401);\n    }\n}\n\n...\n  // Verify that the user is logged in, and return 401 if not\n  @Get('/todo/list')\n  @Response(Ok)\n  @Use(isLogin)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n...\n```","source":"api-controllers.md","raw":"---\nlayout: default\nid: api-controllers\ntitle: controllers\nnext: api-models.html\n---\n\nThe controller directory holds the `controller` class, and the `controller` class define controller by decorator Controller from `require('koa-cola/client')`. and we can define the router and view by decorators as well, so We can design different controllers according to different production needs.\n\n## Controller that provides api interface\n\n```javascript\nconst { Controller, Get, Post, Body } = require('koa-cola/client');\n\n@Controller('')\nexport default class {\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n\n  \n  @Post('/todo/save')\n  async saveTodo(@Body() body) {\n    return await app.models.todo.save(body);\n  }\n}\n```\n\n### Return fixed data format by return of router\n\n```javascript\n  /**\n  data format:\n    [todoItem, ...]\n  */\n  @Get('/todo/list')\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\nreturn a pre-define wrapper data format by using Response decorator\n```javascript\n  const Ok = function Ok(ctx, data){\n      ctx.status = 200;\n      if(data){\n          ctx.body = {\n              code : 200,\n              result : data\n          };\n      }\n  }\n  /**\n  return data format:\n  {\n      code : 200,\n      result : [todoItem, ...]\n  }\n  */\n  @Get('/todo/list')\n  @Response(Ok)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n```\n\n### Using `Use` decorator as middleware of router\n\n```javascript\n function isLogin(ctx, next){\n    if(ctx.state.user){\n        await next();\n    }else{\n        ctx.throw(401);\n    }\n}\n\n...\n  // Verify that the user is logged in, and return 401 if not\n  @Get('/todo/list')\n  @Response(Ok)\n  @Use(isLogin)\n  async getTodoList() {\n    return await app.models.todo.find({});\n  }\n...\n```","date":"2018-05-31T07:50:58.689Z","updated":"2018-05-31T07:50:58.689Z","path":"api-controllers.html","comments":1,"_id":"cjhu90g8300015oivgrlpwy4n","content":"<p>The controller directory holds the <code>controller</code> class, and the <code>controller</code> class define controller by decorator Controller from <code>require('koa-cola/client')</code>. and we can define the router and view by decorators as well, so We can design different controllers according to different production needs.</p>\n<h2>Controller that provides api interface</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Post, Body &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">  @Post(<span class=\"string\">'/todo/save'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> saveTodo(@Body() body) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.save(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>Return fixed data format by return of router</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">data format:</span></div><div class=\"line\"><span class=\"comment\">  [todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>return a pre-define wrapper data format by using Response decorator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Ok = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">    ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(data)&#123;</div><div class=\"line\">        ctx.body = &#123;</div><div class=\"line\">            code : <span class=\"number\">200</span>,</div><div class=\"line\">            result : data</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">return data format:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    code : 200,</span></div><div class=\"line\"><span class=\"comment\">    result : [todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">@Response(Ok)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>Using <code>Use</code> decorator as middleware of router</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\">ctx, next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ctx.state.user)&#123;</div><div class=\"line\">        <span class=\"keyword\">await</span> next();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        ctx.throw(<span class=\"number\">401</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">// Verify that the user is logged in, and return 401 if not</span></div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  @Response(Ok)</div><div class=\"line\">  @Use(isLogin)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>The controller directory holds the <code>controller</code> class, and the <code>controller</code> class define controller by decorator Controller from <code>require('koa-cola/client')</code>. and we can define the router and view by decorators as well, so We can design different controllers according to different production needs.</p>\n<h2>Controller that provides api interface</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Controller, Get, Post, Body &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">  @Post(<span class=\"string\">'/todo/save'</span>)</div><div class=\"line\">  <span class=\"keyword\">async</span> saveTodo(@Body() body) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.save(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>Return fixed data format by return of router</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">data format:</span></div><div class=\"line\"><span class=\"comment\">  [todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>return a pre-define wrapper data format by using Response decorator</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Ok = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">    ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(data)&#123;</div><div class=\"line\">        ctx.body = &#123;</div><div class=\"line\">            code : <span class=\"number\">200</span>,</div><div class=\"line\">            result : data</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">return data format:</span></div><div class=\"line\"><span class=\"comment\">&#123;</span></div><div class=\"line\"><span class=\"comment\">    code : 200,</span></div><div class=\"line\"><span class=\"comment\">    result : [todoItem, ...]</span></div><div class=\"line\"><span class=\"comment\">&#125;</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\">@Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">@Response(Ok)</div><div class=\"line\"><span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>Using <code>Use</code> decorator as middleware of router</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLogin</span>(<span class=\"params\">ctx, next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ctx.state.user)&#123;</div><div class=\"line\">        <span class=\"keyword\">await</span> next();</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        ctx.throw(<span class=\"number\">401</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">// Verify that the user is logged in, and return 401 if not</span></div><div class=\"line\">  @Get(<span class=\"string\">'/todo/list'</span>)</div><div class=\"line\">  @Response(Ok)</div><div class=\"line\">  @Use(isLogin)</div><div class=\"line\">  <span class=\"keyword\">async</span> getTodoList() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> app.models.todo.find(&#123;&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>"},{"layout":"default","id":"api-responses","title":"responses","prev":"api-schemas.html","next":"config.html","_content":"\npre-define the format of router return.\n\nfor example return json contain code 200 and result：\n\n```javascript\n  export default function Ok(ctx, data){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : data\n    };\n  }\n```\n\nor return the format of list data：\n```javascript\n  export default function List(ctx, {data, page, page_count, total_count}){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : {\n            list : data,\n            _metadata: {\n                page: 51,\n                page_count: 20,\n                total_count: 521\n            }\n        }\n    };\n  }\n```","source":"api-responses.md","raw":"---\nlayout: default\nid: api-responses\ntitle: responses\nprev: api-schemas.html\nnext: config.html\n---\n\npre-define the format of router return.\n\nfor example return json contain code 200 and result：\n\n```javascript\n  export default function Ok(ctx, data){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : data\n    };\n  }\n```\n\nor return the format of list data：\n```javascript\n  export default function List(ctx, {data, page, page_count, total_count}){\n    ctx.status = 200;\n    ctx.body = {\n        code : 200,\n        result : {\n            list : data,\n            _metadata: {\n                page: 51,\n                page_count: 20,\n                total_count: 521\n            }\n        }\n    };\n  }\n```","date":"2017-11-21T06:31:28.898Z","updated":"2017-11-21T06:31:28.898Z","path":"api-responses.html","comments":1,"_id":"cjhu90g8400025oive31agjse","content":"<p>pre-define the format of router return.</p>\n<p>for example return json contain code 200 and result：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : data</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>or return the format of list data：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">List</span>(<span class=\"params\">ctx, &#123;data, page, page_count, total_count&#125;</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : &#123;</div><div class=\"line\">          list : data,</div><div class=\"line\">          _metadata: &#123;</div><div class=\"line\">              page: <span class=\"number\">51</span>,</div><div class=\"line\">              page_count: <span class=\"number\">20</span>,</div><div class=\"line\">              total_count: <span class=\"number\">521</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>pre-define the format of router return.</p>\n<p>for example return json contain code 200 and result：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx, data</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : data</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>or return the format of list data：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">List</span>(<span class=\"params\">ctx, &#123;data, page, page_count, total_count&#125;</span>)</span>&#123;</div><div class=\"line\">  ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">  ctx.body = &#123;</div><div class=\"line\">      code : <span class=\"number\">200</span>,</div><div class=\"line\">      result : &#123;</div><div class=\"line\">          list : data,</div><div class=\"line\">          _metadata: &#123;</div><div class=\"line\">              page: <span class=\"number\">51</span>,</div><div class=\"line\">              page_count: <span class=\"number\">20</span>,</div><div class=\"line\">              total_count: <span class=\"number\">521</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"compare-next","title":"Compare with next.js","prev":"ssr.html","next":"universal.html","_content":"\n[next.js](https://github.com/zeit/next.js) is one of the popular SSR and reactjs base frameworks, but some difference between koa-cola and next.js.\n\n### fetch data\nnext.js provide static method \"getInitialProps\" to fetch data：\n```javascript\nimport React from 'react'\nexport default class extends React.Component {\n  static async getInitialProps ({ req }) {\n    return req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n```\n\nkoa-cola use Cola decorator to fetch data:\n\n```javascript\nimport React from 'react'\nvar { Cola } = require('koa-cola/client');\n\n@Cola({\n  initData : {\n    userAgent : req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n})\nexport default class extends React.Component {\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n```\n\nthe first way fetch data in koa-cola props actually come from react-redux, because koa-cola combines all pages reducer into redux, so in browser espcially in SPA, you can share this kind of props in all pages. while next.js has not support this yet.\n\n### support children components data fetch\n\nnext.js does not support fetch data in children components:\n> Note: getInitialProps can not be used in children components. Only in pages.\n\nbut in koa-cola this can easy be supported by using the decorator \"include\":\n\n```javascript\n// in child component\n@Cola({\n  initData : {\n    userAgent : req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n})\nclass Child extends React.Component {\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n\n\n// in page\nvar { Cola, include } = require('koa-cola/client');\n@include({\n  Child\n})\nexport default class Page extends React.Component{\n  render() {\n    return <div>\n        <Child {...this.props} />\n      </div>\n  }\n}\n\n```","source":"compare-next.md","raw":"---\nlayout: default\nid: compare-next\ntitle: Compare with next.js\nprev: ssr.html\nnext: universal.html\n---\n\n[next.js](https://github.com/zeit/next.js) is one of the popular SSR and reactjs base frameworks, but some difference between koa-cola and next.js.\n\n### fetch data\nnext.js provide static method \"getInitialProps\" to fetch data：\n```javascript\nimport React from 'react'\nexport default class extends React.Component {\n  static async getInitialProps ({ req }) {\n    return req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n```\n\nkoa-cola use Cola decorator to fetch data:\n\n```javascript\nimport React from 'react'\nvar { Cola } = require('koa-cola/client');\n\n@Cola({\n  initData : {\n    userAgent : req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n})\nexport default class extends React.Component {\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n```\n\nthe first way fetch data in koa-cola props actually come from react-redux, because koa-cola combines all pages reducer into redux, so in browser espcially in SPA, you can share this kind of props in all pages. while next.js has not support this yet.\n\n### support children components data fetch\n\nnext.js does not support fetch data in children components:\n> Note: getInitialProps can not be used in children components. Only in pages.\n\nbut in koa-cola this can easy be supported by using the decorator \"include\":\n\n```javascript\n// in child component\n@Cola({\n  initData : {\n    userAgent : req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n})\nclass Child extends React.Component {\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n\n\n// in page\nvar { Cola, include } = require('koa-cola/client');\n@include({\n  Child\n})\nexport default class Page extends React.Component{\n  render() {\n    return <div>\n        <Child {...this.props} />\n      </div>\n  }\n}\n\n```","date":"2018-05-31T07:51:25.473Z","updated":"2018-05-31T07:51:25.473Z","path":"compare-next.html","comments":1,"_id":"cjhu90g8400035oivlquy0om0","content":"<p><a href=\"https://github.com/zeit/next.js\" target=\"_blank\" rel=\"external\">next.js</a> is one of the popular SSR and reactjs base frameworks, but some difference between koa-cola and next.js.</p>\n<h3>fetch data</h3>\n<p>next.js provide static method &quot;getInitialProps&quot; to fetch data：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> getInitialProps (&#123; req &#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola use Cola decorator to fetch data:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; Cola &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    userAgent : req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>the first way fetch data in koa-cola props actually come from react-redux, because koa-cola combines all pages reducer into redux, so in browser espcially in SPA, you can share this kind of props in all pages. while next.js has not support this yet.</p>\n<h3>support children components data fetch</h3>\n<p>next.js does not support fetch data in children components:</p>\n<blockquote>\n<p>Note: getInitialProps can not be used in children components. Only in pages.</p>\n</blockquote>\n<p>but in koa-cola this can easy be supported by using the decorator &quot;include&quot;:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in child component</span></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    userAgent : req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in page</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; Cola, include &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@include(&#123;</div><div class=\"line\">  Child</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &lt;Child &#123;...this.props&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p><a href=\"https://github.com/zeit/next.js\" target=\"_blank\" rel=\"external\">next.js</a> is one of the popular SSR and reactjs base frameworks, but some difference between koa-cola and next.js.</p>\n<h3>fetch data</h3>\n<p>next.js provide static method &quot;getInitialProps&quot; to fetch data：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> getInitialProps (&#123; req &#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola use Cola decorator to fetch data:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; Cola &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    userAgent : req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>the first way fetch data in koa-cola props actually come from react-redux, because koa-cola combines all pages reducer into redux, so in browser espcially in SPA, you can share this kind of props in all pages. while next.js has not support this yet.</p>\n<h3>support children components data fetch</h3>\n<p>next.js does not support fetch data in children components:</p>\n<blockquote>\n<p>Note: getInitialProps can not be used in children components. Only in pages.</p>\n</blockquote>\n<p>but in koa-cola this can easy be supported by using the decorator &quot;include&quot;:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in child component</span></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    userAgent : req</div><div class=\"line\">      ? &#123; <span class=\"attr\">userAgent</span>: req.headers[<span class=\"string\">'user-agent'</span>] &#125;</div><div class=\"line\">      : &#123; <span class=\"attr\">userAgent</span>: navigator.userAgent &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      Hello World &#123;this.props.userAgent&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in page</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; Cola, include &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@include(&#123;</div><div class=\"line\">  Child</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &lt;Child &#123;...this.props&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"api","title":"api","next":"api-controllers.html","_content":"\nfolder `api` contain all business logic layer except views, so it contain [controller](/api-controllers.html) and [model](/api-models.html) of MVC architecture.\n\nthe api module of using cli `koa-cola new` command include：\n* controllers\n* models\n* schemas\n* responses\n\nafter the application is launched, these api modules will inject into `app` global, so that mean you can get these refer module by calling `app.modulename.xxx` like `app.controllers.IndexController`\n\nthere are other module that you can inject into app global if needed like：\n* policies\n* services\n* managers\n* middlewares\n\n\n","source":"api.md","raw":"---\nlayout: default\nid: api\ntitle: api\nnext: api-controllers.html\n---\n\nfolder `api` contain all business logic layer except views, so it contain [controller](/api-controllers.html) and [model](/api-models.html) of MVC architecture.\n\nthe api module of using cli `koa-cola new` command include：\n* controllers\n* models\n* schemas\n* responses\n\nafter the application is launched, these api modules will inject into `app` global, so that mean you can get these refer module by calling `app.modulename.xxx` like `app.controllers.IndexController`\n\nthere are other module that you can inject into app global if needed like：\n* policies\n* services\n* managers\n* middlewares\n\n\n","date":"2017-11-21T06:46:04.866Z","updated":"2017-11-21T06:46:04.866Z","path":"api.html","comments":1,"_id":"cjhu90g8500045oivwn9hbz5w","content":"<p>folder <code>api</code> contain all business logic layer except views, so it contain <a href=\"/api-controllers.html\">controller</a> and <a href=\"/api-models.html\">model</a> of MVC architecture.</p>\n<p>the api module of using cli <code>koa-cola new</code> command include：</p>\n<ul>\n<li>controllers</li>\n<li>models</li>\n<li>schemas</li>\n<li>responses</li>\n</ul>\n<p>after the application is launched, these api modules will inject into <code>app</code> global, so that mean you can get these refer module by calling <code>app.modulename.xxx</code> like <code>app.controllers.IndexController</code></p>\n<p>there are other module that you can inject into app global if needed like：</p>\n<ul>\n<li>policies</li>\n<li>services</li>\n<li>managers</li>\n<li>middlewares</li>\n</ul>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>folder <code>api</code> contain all business logic layer except views, so it contain <a href=\"/api-controllers.html\">controller</a> and <a href=\"/api-models.html\">model</a> of MVC architecture.</p>\n<p>the api module of using cli <code>koa-cola new</code> command include：</p>\n<ul>\n<li>controllers</li>\n<li>models</li>\n<li>schemas</li>\n<li>responses</li>\n</ul>\n<p>after the application is launched, these api modules will inject into <code>app</code> global, so that mean you can get these refer module by calling <code>app.modulename.xxx</code> like <code>app.controllers.IndexController</code></p>\n<p>there are other module that you can inject into app global if needed like：</p>\n<ul>\n<li>policies</li>\n<li>services</li>\n<li>managers</li>\n<li>middlewares</li>\n</ul>\n"},{"layout":"default","id":"api-schemas","title":"schemas","prev":"api-models.html","next":"api-responses.html","_content":"\nIt's inevitable to define the data schema whether it is using mongodb or other databases. \nIt's a benefit to make server-side and frontend to reuse the same code.\n\nAfter starting the app, server side can use `app.schemas` to get schema object, front side can get it through `require` files.","source":"api-schemas.md","raw":"---\nlayout: default\nid: api-schemas\ntitle: schemas\nprev: api-models.html\nnext: api-responses.html\n---\n\nIt's inevitable to define the data schema whether it is using mongodb or other databases. \nIt's a benefit to make server-side and frontend to reuse the same code.\n\nAfter starting the app, server side can use `app.schemas` to get schema object, front side can get it through `require` files.","date":"2017-11-23T08:51:56.845Z","updated":"2017-11-23T08:51:56.845Z","path":"api-schemas.html","comments":1,"_id":"cjhu90g8500055oivtny6cfh9","content":"<p>It's inevitable to define the data schema whether it is using mongodb or other databases.<br>\nIt's a benefit to make server-side and frontend to reuse the same code.</p>\n<p>After starting the app, server side can use <code>app.schemas</code> to get schema object, front side can get it through <code>require</code> files.</p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>It's inevitable to define the data schema whether it is using mongodb or other databases.<br>\nIt's a benefit to make server-side and frontend to reuse the same code.</p>\n<p>After starting the app, server side can use <code>app.schemas</code> to get schema object, front side can get it through <code>require</code> files.</p>\n"},{"layout":"default","id":"config","title":"config","prev":"api-responses.html","next":"config-env.html","_content":"\n## global.app.config\n\nThe app.config object contains the runtime values of your app's configuration. It is assembled automatically when koa-cola project is launched; merging together environment variables, and the configuration objects exported from any and all modules in your app's config/ directory.\n\n\t> config\n\t    > env\n            local.js\n            test.js\n            development.js\n            production.js\n        bootstrap.js\n        middlewares.js\n        model.js\n        any_config_you_need.js \n        ...\n\ntake any_config_you_need.js for example:\n\n```js\nexports.module = {\n  foo : 'bar'\n}\n```\n\nso `app.config.foo === 'bar'`\n\nif environment NODE_ENV is 'development' and config/env/development.js contains:\n\n```js\nexports.module = {\n  ...\n  foo : 'wow'\n  ...\n}\n```\n\nthen app.config.foo will be override and will be `app.config.foo === 'wow'`\n\n","source":"config.md","raw":"---\nlayout: default\nid: config\ntitle: config\nprev: api-responses.html\nnext: config-env.html\n---\n\n## global.app.config\n\nThe app.config object contains the runtime values of your app's configuration. It is assembled automatically when koa-cola project is launched; merging together environment variables, and the configuration objects exported from any and all modules in your app's config/ directory.\n\n\t> config\n\t    > env\n            local.js\n            test.js\n            development.js\n            production.js\n        bootstrap.js\n        middlewares.js\n        model.js\n        any_config_you_need.js \n        ...\n\ntake any_config_you_need.js for example:\n\n```js\nexports.module = {\n  foo : 'bar'\n}\n```\n\nso `app.config.foo === 'bar'`\n\nif environment NODE_ENV is 'development' and config/env/development.js contains:\n\n```js\nexports.module = {\n  ...\n  foo : 'wow'\n  ...\n}\n```\n\nthen app.config.foo will be override and will be `app.config.foo === 'wow'`\n\n","date":"2017-11-22T08:31:41.675Z","updated":"2017-11-22T08:31:41.675Z","path":"config.html","comments":1,"_id":"cjhu90g8900065oivhjyj6136","content":"<h2>global.app.config</h2>\n<p>The app.config object contains the runtime values of your app's configuration. It is assembled automatically when koa-cola project is launched; merging together environment variables, and the configuration objects exported from any and all modules in your app's config/ directory.</p>\n<pre><code>&gt; config\n    &gt; env\n        local.js\n        test.js\n        development.js\n        production.js\n    bootstrap.js\n    middlewares.js\n    model.js\n    any_config_you_need.js \n    ...\n</code></pre>\n<p>take any_config_you_need.js for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.module = &#123;</div><div class=\"line\">  foo : <span class=\"string\">'bar'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>so <code>app.config.foo === 'bar'</code></p>\n<p>if environment NODE_ENV is 'development' and config/env/development.js contains:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.module = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  foo : <span class=\"string\">'wow'</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>then app.config.foo will be override and will be <code>app.config.foo === 'wow'</code></p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h2>global.app.config</h2>\n<p>The app.config object contains the runtime values of your app's configuration. It is assembled automatically when koa-cola project is launched; merging together environment variables, and the configuration objects exported from any and all modules in your app's config/ directory.</p>\n<pre><code>&gt; config\n    &gt; env\n        local.js\n        test.js\n        development.js\n        production.js\n    bootstrap.js\n    middlewares.js\n    model.js\n    any_config_you_need.js \n    ...\n</code></pre>\n<p>take any_config_you_need.js for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.module = &#123;</div><div class=\"line\">  foo : <span class=\"string\">'bar'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>so <code>app.config.foo === 'bar'</code></p>\n<p>if environment NODE_ENV is 'development' and config/env/development.js contains:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.module = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  foo : <span class=\"string\">'wow'</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>then app.config.foo will be override and will be <code>app.config.foo === 'wow'</code></p>\n"},{"layout":"default","id":"d-mvc","title":"MVC pattern with decorator","prev":"universal.html","next":"installation.html","_content":"\nIn koa-cola we can write mvc by using es7's decorator. Controller have to be defined with the provided decorator (as it relates to the router related definition), and the model and view layers are not forced to be defined by the decorator as the demo following.\n\n### Controller\n    \nUse decorator to inject dependencies. In the router layer, the decorators include router, middleware, response and view. \nIn the response phase, the decorators including koa.Context, param, response, request, etc. For example. The following example:\n\n```javascript\nconst { \n    Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response \n} = require('koa-cola/client');\nimport Ok from '../responses/ok';\n\n@Controller('') \nclass FooController {\n    @Get('/some_api')  // define router\n    @Response(Ok)      // define return data format of API\n    some_api (@Ctx() ctx, @QueryParam() param : any) { \n        // inject ctx & param\n        // The data return the format defined by \"Ok\"\n        return {\n            foo : 'bar'\n        }\n    }\n\n    @Get('/some_page') // define router\n    @View('some_page') // this router use the page \"some_page.tsx\" inside \"/views/pages/\"  to render the view\n    some_page (@Ctx() ctx, @QueryParam() param : any) { // inject ctx & param\n        // Initialize the data.\n        // Data will be injected into react component's props, \n        return {\n            foo : 'bar'\n        }\n    }\n}\n```\n\nOk Response\n\n```javascript\nimport * as Koa from 'koa';\nexport default function Ok(ctx : Koa.Context, data){\n    ctx.status = 200;\n    if(data){\n        ctx.body = {\n            code : 200,\n            result : data\n        };\n    }\n}\n```\n\n\n### View\n\nPage's view components can use different types of react components\n\n* `React.Component` component\n* stateless function component\n* react-redux component\n* `Cola` decorator component provided by koa-cola (React-redux based data initialization component).\n\n#### React.Component\n\n```javascript\n    class Index extends React.Component<Props, States>   {\n        constructor(props: Props) {\n            super(props);\n        }\n        static defaultProps = {\n            \n        };\n        render() {\n            return <h1>Wow koa-cola!</h1>\n        }\n    };\n    export default Index\n```\n\n#### stateless component\n\n```javascript\n    export default function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n```\n\n#### react-redux component\n\n```javascript\n    import { connect } from 'react-redux'\n    const Index = function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n    export default connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Index)\n```\n\n#### Cola decorator component\nUse Cola decorators to create react-redux base components.\n\nIf there's children components also created with `Cola` decorator, you need to use `include` decorator to include them:\n\n```javascript\nimport AddTodo from '../official-demo/containers/AddTodo';\nimport FilterLink from '../official-demo/containers/FilterLink';\nimport VisibleTodoList from '../official-demo/containers/VisibleTodoList';\nconst {\n  Cola\n  include\n} = require('koa-cola/client');\n\n@Cola({\n    initData : {\n        todosData : async ({ params, helpers, store: { dispatch } }) => {\n            const api = new GetTodoList({});\n            const data = await api.fetch(helpers.ctx);\n            dispatch({\n                type: 'INIT_TODO',\n                data: data.result.result\n            });\n            return data.result.result;\n        }\n    },\n    reducer : {\n        todos,\n        visibilityFilter\n    }\n})\n@include({ AddTodo, FilterLink, VisibleTodoList })\nclass ColastyleDemo extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <App />;\n  }\n}\nexport default ColastyleDemo;\n```\n\n#### Custom header & bundle packing\n\nWhen koa-cola render view in server side, it will be looking for `views/pages/layout.ts` as the page layout.\nif `layout.ts` file does not exist, the view component will render directly.\nIf the view component uses the `doNotUseLayout` decorator, the page will not use `layout.ts`, and you probably need `header` and `bundle` decorators to define header and resource.\n\n```javascript\nimport * as React from 'react';\nconst {\n  header, bundle, doNotUseLayout\n} = require('koa-cola/client');\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nfunction Page (){\n  return <h1>koa-cola</h1>\n};\nexport default Page\n```\n\n### Model\n#### create \"user.ts\" directly under the directory \"api/models\"\n\n```javascript\nimport * as mongoose from 'mongoose'\nexport default mongoose.model('user', new mongoose.Schema({\n    name : String,\n    email : String\n}))\n```\n\nThen you can use it in other code:\n```javascript\nconst user = await app.models.user.find({name : 'harry'})\n```\n\n#### koa-cola style to write the model\n\nFirst create schema `user.ts` in the `api/schemas` directory:\n\n```javascript\nexport const userSchema = function(mongoose){\n    return {\n        name: {\n            type : String\n        },\n        email : {\n            type : String\n        }\n    }\n}\n```\n\nCreate a model `user.ts` in `api/models`:\n\n```javascript\nimport * as mongoose from 'mongoose'\nimport userSchema from '../schemas/user'\nexport default mongoose.model('user', new mongoose.Schema(userSchema(mongoose)))\n```\n\nUse decorator to define model also works well, we can define the relevant hook if needeed. More details can visit [mongoose-decorators](https://github.com/aksyonov/mongoose-decorators)\n\n```javascript\nimport { todoListSchema } from '../schemas/todoList';\nconst { model } = app.decorators.model;\n\n@model(todoListSchema(app.mongoose))\nexport default class TodoList {}\n```\n\nGenerate model's schema using cli\n\n`koa-cola schema` will automatically generate model interface in `typings/schema.ts`.\n\nThen you can enjoy the convenience of vscode's intellisense by defining the types of typescript in your code.\n\n```javascript\nimport {userSchema} from './typings/schema' \nconst user : userSchema = await app.models.user.find({name : 'harry'})\n```\n\nAs mentioned earlier, the reason we need to define the model schema in `api/schemas`, in addition to generate schema interface, you can use the schema in both browser and server side. more detail you can visit [document](http://mongoosejs.com/docs/browser.html)\n\n#### koa-cola provides universal api interface definitions for both front and back end, such as `GetTodoList` api definition in the todolist demo:\n\n```javascript\nimport { todoListSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola';\n\nexport class GetTodoList extends ApiBase<\n  {\n      // Parameter Type\n  },\n  {\n    code: number;\n    result: [todoListSchema];\n  },\n  {\n      // Abnormal definition\n  }\n> {\n  constructor(body) {\n    super(body);\n  }\n  url: string = '/api/getTodoList';\n  method: string = 'get';\n}\n```\n\nUse api in the code, and get the convenience provided by ts:\n\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"/>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"/>\n\n\n```javascript\nimport { testSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola'\nexport interface ComposeBody{\n    foo : string,\n    bar? : number\n}\nexport class Compose extends ApiBase<ComposeBody, testSchema, {}>{\n    constructor(body : ComposeBody){\n        super(body)\n    }\n    url : string = '/compose'\n    method : string = 'post'\n}\n```\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"/>\n","source":"d-mvc.md","raw":"---\nlayout: default\nid: d-mvc\ntitle: MVC pattern with decorator\nprev: universal.html\nnext: installation.html\n---\n\nIn koa-cola we can write mvc by using es7's decorator. Controller have to be defined with the provided decorator (as it relates to the router related definition), and the model and view layers are not forced to be defined by the decorator as the demo following.\n\n### Controller\n    \nUse decorator to inject dependencies. In the router layer, the decorators include router, middleware, response and view. \nIn the response phase, the decorators including koa.Context, param, response, request, etc. For example. The following example:\n\n```javascript\nconst { \n    Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response \n} = require('koa-cola/client');\nimport Ok from '../responses/ok';\n\n@Controller('') \nclass FooController {\n    @Get('/some_api')  // define router\n    @Response(Ok)      // define return data format of API\n    some_api (@Ctx() ctx, @QueryParam() param : any) { \n        // inject ctx & param\n        // The data return the format defined by \"Ok\"\n        return {\n            foo : 'bar'\n        }\n    }\n\n    @Get('/some_page') // define router\n    @View('some_page') // this router use the page \"some_page.tsx\" inside \"/views/pages/\"  to render the view\n    some_page (@Ctx() ctx, @QueryParam() param : any) { // inject ctx & param\n        // Initialize the data.\n        // Data will be injected into react component's props, \n        return {\n            foo : 'bar'\n        }\n    }\n}\n```\n\nOk Response\n\n```javascript\nimport * as Koa from 'koa';\nexport default function Ok(ctx : Koa.Context, data){\n    ctx.status = 200;\n    if(data){\n        ctx.body = {\n            code : 200,\n            result : data\n        };\n    }\n}\n```\n\n\n### View\n\nPage's view components can use different types of react components\n\n* `React.Component` component\n* stateless function component\n* react-redux component\n* `Cola` decorator component provided by koa-cola (React-redux based data initialization component).\n\n#### React.Component\n\n```javascript\n    class Index extends React.Component<Props, States>   {\n        constructor(props: Props) {\n            super(props);\n        }\n        static defaultProps = {\n            \n        };\n        render() {\n            return <h1>Wow koa-cola!</h1>\n        }\n    };\n    export default Index\n```\n\n#### stateless component\n\n```javascript\n    export default function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n```\n\n#### react-redux component\n\n```javascript\n    import { connect } from 'react-redux'\n    const Index = function({some_props}) {\n        return <h1>Wow koa-cola!</h1>\n    }\n    export default connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Index)\n```\n\n#### Cola decorator component\nUse Cola decorators to create react-redux base components.\n\nIf there's children components also created with `Cola` decorator, you need to use `include` decorator to include them:\n\n```javascript\nimport AddTodo from '../official-demo/containers/AddTodo';\nimport FilterLink from '../official-demo/containers/FilterLink';\nimport VisibleTodoList from '../official-demo/containers/VisibleTodoList';\nconst {\n  Cola\n  include\n} = require('koa-cola/client');\n\n@Cola({\n    initData : {\n        todosData : async ({ params, helpers, store: { dispatch } }) => {\n            const api = new GetTodoList({});\n            const data = await api.fetch(helpers.ctx);\n            dispatch({\n                type: 'INIT_TODO',\n                data: data.result.result\n            });\n            return data.result.result;\n        }\n    },\n    reducer : {\n        todos,\n        visibilityFilter\n    }\n})\n@include({ AddTodo, FilterLink, VisibleTodoList })\nclass ColastyleDemo extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <App />;\n  }\n}\nexport default ColastyleDemo;\n```\n\n#### Custom header & bundle packing\n\nWhen koa-cola render view in server side, it will be looking for `views/pages/layout.ts` as the page layout.\nif `layout.ts` file does not exist, the view component will render directly.\nIf the view component uses the `doNotUseLayout` decorator, the page will not use `layout.ts`, and you probably need `header` and `bundle` decorators to define header and resource.\n\n```javascript\nimport * as React from 'react';\nconst {\n  header, bundle, doNotUseLayout\n} = require('koa-cola/client');\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nfunction Page (){\n  return <h1>koa-cola</h1>\n};\nexport default Page\n```\n\n### Model\n#### create \"user.ts\" directly under the directory \"api/models\"\n\n```javascript\nimport * as mongoose from 'mongoose'\nexport default mongoose.model('user', new mongoose.Schema({\n    name : String,\n    email : String\n}))\n```\n\nThen you can use it in other code:\n```javascript\nconst user = await app.models.user.find({name : 'harry'})\n```\n\n#### koa-cola style to write the model\n\nFirst create schema `user.ts` in the `api/schemas` directory:\n\n```javascript\nexport const userSchema = function(mongoose){\n    return {\n        name: {\n            type : String\n        },\n        email : {\n            type : String\n        }\n    }\n}\n```\n\nCreate a model `user.ts` in `api/models`:\n\n```javascript\nimport * as mongoose from 'mongoose'\nimport userSchema from '../schemas/user'\nexport default mongoose.model('user', new mongoose.Schema(userSchema(mongoose)))\n```\n\nUse decorator to define model also works well, we can define the relevant hook if needeed. More details can visit [mongoose-decorators](https://github.com/aksyonov/mongoose-decorators)\n\n```javascript\nimport { todoListSchema } from '../schemas/todoList';\nconst { model } = app.decorators.model;\n\n@model(todoListSchema(app.mongoose))\nexport default class TodoList {}\n```\n\nGenerate model's schema using cli\n\n`koa-cola schema` will automatically generate model interface in `typings/schema.ts`.\n\nThen you can enjoy the convenience of vscode's intellisense by defining the types of typescript in your code.\n\n```javascript\nimport {userSchema} from './typings/schema' \nconst user : userSchema = await app.models.user.find({name : 'harry'})\n```\n\nAs mentioned earlier, the reason we need to define the model schema in `api/schemas`, in addition to generate schema interface, you can use the schema in both browser and server side. more detail you can visit [document](http://mongoosejs.com/docs/browser.html)\n\n#### koa-cola provides universal api interface definitions for both front and back end, such as `GetTodoList` api definition in the todolist demo:\n\n```javascript\nimport { todoListSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola';\n\nexport class GetTodoList extends ApiBase<\n  {\n      // Parameter Type\n  },\n  {\n    code: number;\n    result: [todoListSchema];\n  },\n  {\n      // Abnormal definition\n  }\n> {\n  constructor(body) {\n    super(body);\n  }\n  url: string = '/api/getTodoList';\n  method: string = 'get';\n}\n```\n\nUse api in the code, and get the convenience provided by ts:\n\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"/>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"/>\n\n\n```javascript\nimport { testSchema } from './typings/schema';\nimport { ApiBase, apiFetch } from 'koa-cola'\nexport interface ComposeBody{\n    foo : string,\n    bar? : number\n}\nexport class Compose extends ApiBase<ComposeBody, testSchema, {}>{\n    constructor(body : ComposeBody){\n        super(body)\n    }\n    url : string = '/compose'\n    method : string = 'post'\n}\n```\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"/>\n","date":"2018-05-31T07:52:52.035Z","updated":"2018-05-31T07:52:52.035Z","path":"d-mvc.html","comments":1,"_id":"cjhu90g8a00075oivvres5z91","content":"<p>In koa-cola we can write mvc by using es7's decorator. Controller have to be defined with the provided decorator (as it relates to the router related definition), and the model and view layers are not forced to be defined by the decorator as the demo following.</p>\n<h3>Controller</h3>\n<p>Use decorator to inject dependencies. In the router layer, the decorators include router, middleware, response and view.<br>\nIn the response phase, the decorators including koa.Context, param, response, request, etc. For example. The following example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; </div><div class=\"line\">    Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response </div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> Ok <span class=\"keyword\">from</span> <span class=\"string\">'../responses/ok'</span>;</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/some_api'</span>)  <span class=\"comment\">// define router</span></div><div class=\"line\">    @Response(Ok)      <span class=\"comment\">// define return data format of API</span></div><div class=\"line\">    some_api (@Ctx() ctx, @QueryParam() param : any) &#123; </div><div class=\"line\">        <span class=\"comment\">// inject ctx &amp; param</span></div><div class=\"line\">        <span class=\"comment\">// The data return the format defined by \"Ok\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Get(<span class=\"string\">'/some_page'</span>) <span class=\"comment\">// define router</span></div><div class=\"line\">    @View(<span class=\"string\">'some_page'</span>) <span class=\"comment\">// this router use the page \"some_page.tsx\" inside \"/views/pages/\"  to render the view</span></div><div class=\"line\">    some_page (@Ctx() ctx, @QueryParam() param : any) &#123; <span class=\"comment\">// inject ctx &amp; param</span></div><div class=\"line\">        <span class=\"comment\">// Initialize the data.</span></div><div class=\"line\">        <span class=\"comment\">// Data will be injected into react component's props, </span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Ok Response</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">'koa'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx : Koa.Context, data</span>)</span>&#123;</div><div class=\"line\">    ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(data)&#123;</div><div class=\"line\">        ctx.body = &#123;</div><div class=\"line\">            code : <span class=\"number\">200</span>,</div><div class=\"line\">            result : data</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>View</h3>\n<p>Page's view components can use different types of react components</p>\n<ul>\n<li><code>React.Component</code> component</li>\n<li>stateless function component</li>\n<li>react-redux component</li>\n<li><code>Cola</code> decorator component provided by koa-cola (React-redux based data initialization component).</li>\n</ul>\n<h4>React.Component</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<h4>stateless component</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>react-redux component</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<h4>Cola decorator component</h4>\n<p>Use Cola decorators to create react-redux base components.</p>\n<p>If there's children components also created with <code>Cola</code> decorator, you need to use <code>include</code> decorator to include them:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AddTodo <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/AddTodo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FilterLink <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/FilterLink'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> VisibleTodoList <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/VisibleTodoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  Cola</div><div class=\"line\">  include</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        todosData : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">            dispatch(&#123;</div><div class=\"line\">                type: <span class=\"string\">'INIT_TODO'</span>,</div><div class=\"line\">                data: data.result.result</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    reducer : &#123;</div><div class=\"line\">        todos,</div><div class=\"line\">        visibilityFilter</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">@include(&#123; AddTodo, FilterLink, VisibleTodoList &#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColastyleDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;App /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default ColastyleDemo;</div></pre></td></tr></table></figure>\n<h4>Custom header &amp; bundle packing</h4>\n<p>When koa-cola render view in server side, it will be looking for <code>views/pages/layout.ts</code> as the page layout.<br>\nif <code>layout.ts</code> file does not exist, the view component will render directly.<br>\nIf the view component uses the <code>doNotUseLayout</code> decorator, the page will not use <code>layout.ts</code>, and you probably need <code>header</code> and <code>bundle</code> decorators to define header and resource.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  header, bundle, doNotUseLayout</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;head&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">&#125;)</div><div class=\"line\">function Page ()&#123;</div><div class=\"line\">  return &lt;h1&gt;koa-cola&lt;/h1&gt;</div><div class=\"line\">&#125;;</div><div class=\"line\">export default Page</div></pre></td></tr></table></figure>\n<h3>Model</h3>\n<h4>create &quot;user.ts&quot; directly under the directory &quot;api/models&quot;</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    email : <span class=\"built_in\">String</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>\n<p>Then you can use it in other code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<h4>koa-cola style to write the model</h4>\n<p>First create schema <code>user.ts</code> in the <code>api/schemas</code> directory:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> userSchema = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mongoose</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        name: &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        email : &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Create a model <code>user.ts</code> in <code>api/models</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">import</span> userSchema <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/user'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(userSchema(mongoose)))</div></pre></td></tr></table></figure>\n<p>Use decorator to define model also works well, we can define the relevant hook if needeed. More details can visit <a href=\"https://github.com/aksyonov/mongoose-decorators\" target=\"_blank\" rel=\"external\">mongoose-decorators</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/todoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; model &#125; = app.decorators.model;</div><div class=\"line\"></div><div class=\"line\">@model(todoListSchema(app.mongoose))</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>Generate model's schema using cli</p>\n<p><code>koa-cola schema</code> will automatically generate model interface in <code>typings/schema.ts</code>.</p>\n<p>Then you can enjoy the convenience of vscode's intellisense by defining the types of typescript in your code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;userSchema&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span> </div><div class=\"line\"><span class=\"keyword\">const</span> user : userSchema = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>As mentioned earlier, the reason we need to define the model schema in <code>api/schemas</code>, in addition to generate schema interface, you can use the schema in both browser and server side. more detail you can visit <a href=\"http://mongoosejs.com/docs/browser.html\" target=\"_blank\" rel=\"external\">document</a></p>\n<h4>koa-cola provides universal api interface definitions for both front and back end, such as <code>GetTodoList</code> api definition in the todolist demo:</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetTodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;</span></div><div class=\"line\"><span class=\"class\">  </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Parameter Type</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    code: number;</div><div class=\"line\">    result: [todoListSchema];</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">      <span class=\"comment\">// Abnormal definition</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(body) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">  url: string = <span class=\"string\">'/api/getTodoList'</span>;</div><div class=\"line\">  method: string = <span class=\"string\">'get'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Use api in the code, and get the convenience provided by ts:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"><br>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; testSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface ComposeBody&#123;</div><div class=\"line\">    foo : string,</div><div class=\"line\">    bar? : number</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compose</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;<span class=\"title\">ComposeBody</span>, <span class=\"title\">testSchema</span>, </span>&#123;&#125;&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(body : ComposeBody)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(body)</div><div class=\"line\">    &#125;</div><div class=\"line\">    url : string = <span class=\"string\">'/compose'</span></div><div class=\"line\">    method : string = <span class=\"string\">'post'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"></p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>In koa-cola we can write mvc by using es7's decorator. Controller have to be defined with the provided decorator (as it relates to the router related definition), and the model and view layers are not forced to be defined by the decorator as the demo following.</p>\n<h3>Controller</h3>\n<p>Use decorator to inject dependencies. In the router layer, the decorators include router, middleware, response and view.<br>\nIn the response phase, the decorators including koa.Context, param, response, request, etc. For example. The following example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; </div><div class=\"line\">    Controller, Get, Use, Param, Body, Delete, Put, Post, QueryParam, View, Ctx, Response </div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> Ok <span class=\"keyword\">from</span> <span class=\"string\">'../responses/ok'</span>;</div><div class=\"line\"></div><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/some_api'</span>)  <span class=\"comment\">// define router</span></div><div class=\"line\">    @Response(Ok)      <span class=\"comment\">// define return data format of API</span></div><div class=\"line\">    some_api (@Ctx() ctx, @QueryParam() param : any) &#123; </div><div class=\"line\">        <span class=\"comment\">// inject ctx &amp; param</span></div><div class=\"line\">        <span class=\"comment\">// The data return the format defined by \"Ok\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Get(<span class=\"string\">'/some_page'</span>) <span class=\"comment\">// define router</span></div><div class=\"line\">    @View(<span class=\"string\">'some_page'</span>) <span class=\"comment\">// this router use the page \"some_page.tsx\" inside \"/views/pages/\"  to render the view</span></div><div class=\"line\">    some_page (@Ctx() ctx, @QueryParam() param : any) &#123; <span class=\"comment\">// inject ctx &amp; param</span></div><div class=\"line\">        <span class=\"comment\">// Initialize the data.</span></div><div class=\"line\">        <span class=\"comment\">// Data will be injected into react component's props, </span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Ok Response</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">'koa'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ok</span>(<span class=\"params\">ctx : Koa.Context, data</span>)</span>&#123;</div><div class=\"line\">    ctx.status = <span class=\"number\">200</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(data)&#123;</div><div class=\"line\">        ctx.body = &#123;</div><div class=\"line\">            code : <span class=\"number\">200</span>,</div><div class=\"line\">            result : data</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>View</h3>\n<p>Page's view components can use different types of react components</p>\n<ul>\n<li><code>React.Component</code> component</li>\n<li>stateless function component</li>\n<li>react-redux component</li>\n<li><code>Cola</code> decorator component provided by koa-cola (React-redux based data initialization component).</li>\n</ul>\n<h4>React.Component</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<h4>stateless component</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4>react-redux component</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;h1&gt;Wow koa-cola!&lt;/h1&gt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<h4>Cola decorator component</h4>\n<p>Use Cola decorators to create react-redux base components.</p>\n<p>If there's children components also created with <code>Cola</code> decorator, you need to use <code>include</code> decorator to include them:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AddTodo <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/AddTodo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FilterLink <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/FilterLink'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> VisibleTodoList <span class=\"keyword\">from</span> <span class=\"string\">'../official-demo/containers/VisibleTodoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  Cola</div><div class=\"line\">  include</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        todosData : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">            dispatch(&#123;</div><div class=\"line\">                type: <span class=\"string\">'INIT_TODO'</span>,</div><div class=\"line\">                data: data.result.result</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    reducer : &#123;</div><div class=\"line\">        todos,</div><div class=\"line\">        visibilityFilter</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">@include(&#123; AddTodo, FilterLink, VisibleTodoList &#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColastyleDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;App /&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default ColastyleDemo;</div></pre></td></tr></table></figure>\n<h4>Custom header &amp; bundle packing</h4>\n<p>When koa-cola render view in server side, it will be looking for <code>views/pages/layout.ts</code> as the page layout.<br>\nif <code>layout.ts</code> file does not exist, the view component will render directly.<br>\nIf the view component uses the <code>doNotUseLayout</code> decorator, the page will not use <code>layout.ts</code>, and you probably need <code>header</code> and <code>bundle</code> decorators to define header and resource.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;</div><div class=\"line\">  header, bundle, doNotUseLayout</div><div class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;head&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">&#125;)</div><div class=\"line\">function Page ()&#123;</div><div class=\"line\">  return &lt;h1&gt;koa-cola&lt;/h1&gt;</div><div class=\"line\">&#125;;</div><div class=\"line\">export default Page</div></pre></td></tr></table></figure>\n<h3>Model</h3>\n<h4>create &quot;user.ts&quot; directly under the directory &quot;api/models&quot;</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(&#123;</div><div class=\"line\">    name : <span class=\"built_in\">String</span>,</div><div class=\"line\">    email : <span class=\"built_in\">String</span></div><div class=\"line\">&#125;))</div></pre></td></tr></table></figure>\n<p>Then you can use it in other code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<h4>koa-cola style to write the model</h4>\n<p>First create schema <code>user.ts</code> in the <code>api/schemas</code> directory:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> userSchema = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mongoose</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        name: &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        email : &#123;</div><div class=\"line\">            type : <span class=\"built_in\">String</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Create a model <code>user.ts</code> in <code>api/models</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span></div><div class=\"line\"><span class=\"keyword\">import</span> userSchema <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/user'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mongoose.model(<span class=\"string\">'user'</span>, <span class=\"keyword\">new</span> mongoose.Schema(userSchema(mongoose)))</div></pre></td></tr></table></figure>\n<p>Use decorator to define model also works well, we can define the relevant hook if needeed. More details can visit <a href=\"https://github.com/aksyonov/mongoose-decorators\" target=\"_blank\" rel=\"external\">mongoose-decorators</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/todoList'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; model &#125; = app.decorators.model;</div><div class=\"line\"></div><div class=\"line\">@model(todoListSchema(app.mongoose))</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>Generate model's schema using cli</p>\n<p><code>koa-cola schema</code> will automatically generate model interface in <code>typings/schema.ts</code>.</p>\n<p>Then you can enjoy the convenience of vscode's intellisense by defining the types of typescript in your code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;userSchema&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span> </div><div class=\"line\"><span class=\"keyword\">const</span> user : userSchema = <span class=\"keyword\">await</span> app.models.user.find(&#123;<span class=\"attr\">name</span> : <span class=\"string\">'harry'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>As mentioned earlier, the reason we need to define the model schema in <code>api/schemas</code>, in addition to generate schema interface, you can use the schema in both browser and server side. more detail you can visit <a href=\"http://mongoosejs.com/docs/browser.html\" target=\"_blank\" rel=\"external\">document</a></p>\n<h4>koa-cola provides universal api interface definitions for both front and back end, such as <code>GetTodoList</code> api definition in the todolist demo:</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; todoListSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetTodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;</span></div><div class=\"line\"><span class=\"class\">  </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Parameter Type</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    code: number;</div><div class=\"line\">    result: [todoListSchema];</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">      <span class=\"comment\">// Abnormal definition</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(body) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(body);</div><div class=\"line\">  &#125;</div><div class=\"line\">  url: string = <span class=\"string\">'/api/getTodoList'</span>;</div><div class=\"line\">  method: string = <span class=\"string\">'get'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Use api in the code, and get the convenience provided by ts:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api1.png\" alt=\"Drawing\" width=\"600\"><br>\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api2.png\" alt=\"Drawing\" width=\"600\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; testSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./typings/schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ApiBase, apiFetch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface ComposeBody&#123;</div><div class=\"line\">    foo : string,</div><div class=\"line\">    bar? : number</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Compose</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApiBase</span>&lt;<span class=\"title\">ComposeBody</span>, <span class=\"title\">testSchema</span>, </span>&#123;&#125;&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(body : ComposeBody)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(body)</div><div class=\"line\">    &#125;</div><div class=\"line\">    url : string = <span class=\"string\">'/compose'</span></div><div class=\"line\">    method : string = <span class=\"string\">'post'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/api3.png\" alt=\"Drawing\" width=\"600\"></p>\n"},{"layout":"default","id":"decorators","title":"Decorators","prev":"installation.html","next":"cli.html","_content":"\n### Cola decorator\n`Cola` decorator can define redux initial data, `mapStateToProps` and `mapDispatchToProps` for react-redux components, and reducers for redux as well. Decorator support both server-side and browser-side.\n\n```javascript\n@Cola({\n  initData: {\n    // return any data in props\n    todos : async () => {\n        return await Promise.resolve([])\n    }\n  },\n  mapStateToProps: state => {\n    return {\n      // return props\n    };\n  },\n  mapDispatchToProps: dispatch => {\n    return {\n      // return props\n    };\n  },\n  reducer: {\n    // define reducer here\n  }\n})\nclass App extends React.Component<Props, States> {\n\n}\n```\n\n### include decorator\n`include` decorator indicate the component contain children components defined by Cola decorator.\n\n```javascript\n@Cola({\n  initData : {\n    prop1 : ({ params, helpers }) => {\n      return Promise.resolve('prop1');\n    }\n  }\n})\nclass Child1 extends React.Component<Props, States>   {\n  constructor(props: Props) {\n    super(props);\n  }\n  componentDidMount() {\n    // this.props.onLoad();\n  }\n  render() {\n    var result = <div>\n      <h3>child1</h3>\n      {this.props.prop1}\n    </div>\n    return result;\n  }\n};\n\n@Cola({\n  initData : {\n    prop1 : ({ params, helpers }) => {\n      return null;\n    }\n  }\n})\n@include({\n  Child1\n})\nclass MultiChildren extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    var result = (\n      <div>\n        <div>\n          <h3>parent</h3>\n          {this.props.prop1}\n        </div>\n        <Child1 {...this.props} />\n      </div>\n    );\n    return result;\n  }\n}\n```\n\n### doNotUseLayout decorator\n\nBy default, page component will render with `views/pages/layout.ts`, if we don't need that layout, you can use this decorator:\n\n```javascript\n@doNotUseLayout\nclass Page extends React.Component<Props, States>   {\n  constructor(props: Props) {\n      super(props);\n  }\n  render() {\n    return <div>\n      <div>wow koa-cola</div>\n    </div>\n  }\n};\n```\n\n### header & bundle decorator\n\nWhen using `doNotUseLayout` decorator, if you need to custom header and resource, you can use these two decorators.\n\n```javascript\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nclass Page extends React.Component<Props, States>   {\n  constructor(props: Props) {\n      super(props);\n  }\n  render() {\n    return <div>\n      <div>wow koa-cola</div>\n    </div>\n  }\n};\n```","source":"decorators.md","raw":"---\nlayout: default\nid: decorators\ntitle: Decorators\nprev: installation.html\nnext: cli.html\n---\n\n### Cola decorator\n`Cola` decorator can define redux initial data, `mapStateToProps` and `mapDispatchToProps` for react-redux components, and reducers for redux as well. Decorator support both server-side and browser-side.\n\n```javascript\n@Cola({\n  initData: {\n    // return any data in props\n    todos : async () => {\n        return await Promise.resolve([])\n    }\n  },\n  mapStateToProps: state => {\n    return {\n      // return props\n    };\n  },\n  mapDispatchToProps: dispatch => {\n    return {\n      // return props\n    };\n  },\n  reducer: {\n    // define reducer here\n  }\n})\nclass App extends React.Component<Props, States> {\n\n}\n```\n\n### include decorator\n`include` decorator indicate the component contain children components defined by Cola decorator.\n\n```javascript\n@Cola({\n  initData : {\n    prop1 : ({ params, helpers }) => {\n      return Promise.resolve('prop1');\n    }\n  }\n})\nclass Child1 extends React.Component<Props, States>   {\n  constructor(props: Props) {\n    super(props);\n  }\n  componentDidMount() {\n    // this.props.onLoad();\n  }\n  render() {\n    var result = <div>\n      <h3>child1</h3>\n      {this.props.prop1}\n    </div>\n    return result;\n  }\n};\n\n@Cola({\n  initData : {\n    prop1 : ({ params, helpers }) => {\n      return null;\n    }\n  }\n})\n@include({\n  Child1\n})\nclass MultiChildren extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    var result = (\n      <div>\n        <div>\n          <h3>parent</h3>\n          {this.props.prop1}\n        </div>\n        <Child1 {...this.props} />\n      </div>\n    );\n    return result;\n  }\n}\n```\n\n### doNotUseLayout decorator\n\nBy default, page component will render with `views/pages/layout.ts`, if we don't need that layout, you can use this decorator:\n\n```javascript\n@doNotUseLayout\nclass Page extends React.Component<Props, States>   {\n  constructor(props: Props) {\n      super(props);\n  }\n  render() {\n    return <div>\n      <div>wow koa-cola</div>\n    </div>\n  }\n};\n```\n\n### header & bundle decorator\n\nWhen using `doNotUseLayout` decorator, if you need to custom header and resource, you can use these two decorators.\n\n```javascript\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nclass Page extends React.Component<Props, States>   {\n  constructor(props: Props) {\n      super(props);\n  }\n  render() {\n    return <div>\n      <div>wow koa-cola</div>\n    </div>\n  }\n};\n```","date":"2017-11-23T08:52:28.077Z","updated":"2017-11-23T08:52:28.077Z","path":"decorators.html","comments":1,"_id":"cjhu90g8a00085oivwyz881b8","content":"<h3>Cola decorator</h3>\n<p><code>Cola</code> decorator can define redux initial data, <code>mapStateToProps</code> and <code>mapDispatchToProps</code> for react-redux components, and reducers for redux as well. Decorator support both server-side and browser-side.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData: &#123;</div><div class=\"line\">    <span class=\"comment\">// return any data in props</span></div><div class=\"line\">    todos : <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve([])</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  mapStateToProps: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// return props</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  mapDispatchToProps: <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// return props</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  reducer: &#123;</div><div class=\"line\">    <span class=\"comment\">// define reducer here</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>include decorator</h3>\n<p><code>include</code> decorator indicate the component contain children components defined by Cola decorator.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    prop1 : <span class=\"function\">(<span class=\"params\">&#123; params, helpers &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'prop1'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child1</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"comment\">// this.props.onLoad();</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &lt;div&gt;</div><div class=\"line\">      &lt;h3&gt;child1&lt;/h3&gt;</div><div class=\"line\">      &#123;this.props.prop1&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    prop1 : <span class=\"function\">(<span class=\"params\">&#123; params, helpers &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">@include(&#123;</div><div class=\"line\">  Child1</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiChildren</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &lt;h3&gt;parent&lt;<span class=\"regexp\">/h3&gt;</span></div><div class=\"line\"><span class=\"regexp\">          &#123;this.props.prop1&#125;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</div><div class=\"line\">        &lt;Child1 &#123;...this.props&#125; /&gt;</div><div class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    );</span></div><div class=\"line\"><span class=\"regexp\">    return result;</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div></pre></td></tr></table></figure>\n<h3>doNotUseLayout decorator</h3>\n<p>By default, page component will render with <code>views/pages/layout.ts</code>, if we don't need that layout, you can use this decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@doNotUseLayout</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      &lt;div&gt;wow koa-cola&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3>header &amp; bundle decorator</h3>\n<p>When using <code>doNotUseLayout</code> decorator, if you need to custom header and resource, you can use these two decorators.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;head&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">&#125;)</div><div class=\"line\">class Page extends React.Component&lt;Props, States&gt;   &#123;</div><div class=\"line\">  constructor(props: Props) &#123;</div><div class=\"line\">      super(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return &lt;div&gt;</div><div class=\"line\">      &lt;div&gt;wow koa-cola&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h3>Cola decorator</h3>\n<p><code>Cola</code> decorator can define redux initial data, <code>mapStateToProps</code> and <code>mapDispatchToProps</code> for react-redux components, and reducers for redux as well. Decorator support both server-side and browser-side.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData: &#123;</div><div class=\"line\">    <span class=\"comment\">// return any data in props</span></div><div class=\"line\">    todos : <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve([])</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  mapStateToProps: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// return props</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  mapDispatchToProps: <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// return props</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  reducer: &#123;</div><div class=\"line\">    <span class=\"comment\">// define reducer here</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3>include decorator</h3>\n<p><code>include</code> decorator indicate the component contain children components defined by Cola decorator.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    prop1 : <span class=\"function\">(<span class=\"params\">&#123; params, helpers &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'prop1'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child1</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"comment\">// this.props.onLoad();</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &lt;div&gt;</div><div class=\"line\">      &lt;h3&gt;child1&lt;/h3&gt;</div><div class=\"line\">      &#123;this.props.prop1&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    prop1 : <span class=\"function\">(<span class=\"params\">&#123; params, helpers &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">@include(&#123;</div><div class=\"line\">  Child1</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiChildren</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &lt;h3&gt;parent&lt;<span class=\"regexp\">/h3&gt;</span></div><div class=\"line\"><span class=\"regexp\">          &#123;this.props.prop1&#125;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</div><div class=\"line\">        &lt;Child1 &#123;...this.props&#125; /&gt;</div><div class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    );</span></div><div class=\"line\"><span class=\"regexp\">    return result;</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div></pre></td></tr></table></figure>\n<h3>doNotUseLayout decorator</h3>\n<p>By default, page component will render with <code>views/pages/layout.ts</code>, if we don't need that layout, you can use this decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@doNotUseLayout</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">      &lt;div&gt;wow koa-cola&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3>header &amp; bundle decorator</h3>\n<p>When using <code>doNotUseLayout</code> decorator, if you need to custom header and resource, you can use these two decorators.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;head&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">&#125;)</div><div class=\"line\">class Page extends React.Component&lt;Props, States&gt;   &#123;</div><div class=\"line\">  constructor(props: Props) &#123;</div><div class=\"line\">      super(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return &lt;div&gt;</div><div class=\"line\">      &lt;div&gt;wow koa-cola&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"installation","title":"Getting Started","prev":"d-mvc.html","next":"cli.html","_content":"\n\n\n## Create a project\n\n* `npm i koa-cola -g` \n\ninstall global koa-cola\n\n* `koa-cola new app`\n\nCreate a new koa-cola project in the current folder, name `app`. It will automatically create a complete directory structure, and install dependencies\n \n\n* `cd koa-cola-app && npm run dev`\n\nStart the project as development model, build webpack bundle, launch the project, and open the browser, and watch the specify files changes. When the files are modified, bundled js and ssr server-side rendering will hot reload\n\n\n\n","source":"installation.md","raw":"---\nlayout: default\nid: installation\ntitle: Getting Started\nprev: d-mvc.html\nnext: cli.html\n---\n\n\n\n## Create a project\n\n* `npm i koa-cola -g` \n\ninstall global koa-cola\n\n* `koa-cola new app`\n\nCreate a new koa-cola project in the current folder, name `app`. It will automatically create a complete directory structure, and install dependencies\n \n\n* `cd koa-cola-app && npm run dev`\n\nStart the project as development model, build webpack bundle, launch the project, and open the browser, and watch the specify files changes. When the files are modified, bundled js and ssr server-side rendering will hot reload\n\n\n\n","date":"2018-05-31T07:54:02.818Z","updated":"2018-05-31T07:54:02.818Z","path":"installation.html","comments":1,"_id":"cjhu90g8b00095oiv5g92cvcp","content":"<h2>Create a project</h2>\n<ul>\n<li><code>npm i koa-cola -g</code></li>\n</ul>\n<p>install global koa-cola</p>\n<ul>\n<li><code>koa-cola new app</code></li>\n</ul>\n<p>Create a new koa-cola project in the current folder, name <code>app</code>. It will automatically create a complete directory structure, and install dependencies</p>\n<ul>\n<li><code>cd koa-cola-app &amp;&amp; npm run dev</code></li>\n</ul>\n<p>Start the project as development model, build webpack bundle, launch the project, and open the browser, and watch the specify files changes. When the files are modified, bundled js and ssr server-side rendering will hot reload</p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h2>Create a project</h2>\n<ul>\n<li><code>npm i koa-cola -g</code></li>\n</ul>\n<p>install global koa-cola</p>\n<ul>\n<li><code>koa-cola new app</code></li>\n</ul>\n<p>Create a new koa-cola project in the current folder, name <code>app</code>. It will automatically create a complete directory structure, and install dependencies</p>\n<ul>\n<li><code>cd koa-cola-app &amp;&amp; npm run dev</code></li>\n</ul>\n<p>Start the project as development model, build webpack bundle, launch the project, and open the browser, and watch the specify files changes. When the files are modified, bundled js and ssr server-side rendering will hot reload</p>\n"},{"layout":"default","id":"public","title":"public","prev":"config-env.html","next":"views.html","_content":"\nDefault assets folder is in `/public`, it will be exposed to the root router, and the bundle built by webpack will go to the folder as well by default of webpack.config.js, change it if needed.\n","source":"public.md","raw":"---\nlayout: default\nid: public\ntitle: public\nprev: config-env.html\nnext: views.html\n---\n\nDefault assets folder is in `/public`, it will be exposed to the root router, and the bundle built by webpack will go to the folder as well by default of webpack.config.js, change it if needed.\n","date":"2017-11-22T08:37:55.315Z","updated":"2017-11-22T08:37:55.315Z","path":"public.html","comments":1,"_id":"cjhu90g8b000a5oivro33tzw6","content":"<p>Default assets folder is in <code>/public</code>, it will be exposed to the root router, and the bundle built by webpack will go to the folder as well by default of webpack.config.js, change it if needed.</p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>Default assets folder is in <code>/public</code>, it will be exposed to the root router, and the bundle built by webpack will go to the folder as well by default of webpack.config.js, change it if needed.</p>\n"},{"layout":"default","id":"index","title":"What is koa-cola?","next":"ssr.html","_content":"\n[中文版](https://koa-cola-zh-cn.github.io/)\n\n[koa-cola](https://koa-cola.github.io/) is SSR(server side render)/SPA(singe page application) framework with koa/react/react-router/redux/typescript, and using reactjs stack(react component/react-router/react-redux) and \"isomorphic\" codes (used in both browser and server side).\n\nActually this framework is my experimental work to explore the advanced area of javascript and node.js, like \"isomorphic\" in reactjs stack(react component/react-router/react-redux), async/await, typescript, es7 decorator, etc.\n\n### Features\n* completely and seamlessly SSR/SPA solution\n* \"isomorphic\" component/router/redux/ajax in both client and server side\n* typescript\n* es7 decorator/async coding style\n\n","source":"index.md","raw":"---\nlayout: default\nid: index\ntitle: What is koa-cola?\nnext: ssr.html\n---\n\n[中文版](https://koa-cola-zh-cn.github.io/)\n\n[koa-cola](https://koa-cola.github.io/) is SSR(server side render)/SPA(singe page application) framework with koa/react/react-router/redux/typescript, and using reactjs stack(react component/react-router/react-redux) and \"isomorphic\" codes (used in both browser and server side).\n\nActually this framework is my experimental work to explore the advanced area of javascript and node.js, like \"isomorphic\" in reactjs stack(react component/react-router/react-redux), async/await, typescript, es7 decorator, etc.\n\n### Features\n* completely and seamlessly SSR/SPA solution\n* \"isomorphic\" component/router/redux/ajax in both client and server side\n* typescript\n* es7 decorator/async coding style\n\n","date":"2018-05-31T07:57:56.460Z","updated":"2018-05-31T07:57:56.460Z","path":"index.html","comments":1,"_id":"cjhu90g8c000b5oivet6vb460","content":"<p><a href=\"https://koa-cola-zh-cn.github.io/\" target=\"_blank\" rel=\"external\">中文版</a></p>\n<p><a href=\"https://koa-cola.github.io/\" target=\"_blank\" rel=\"external\">koa-cola</a> is SSR(server side render)/SPA(singe page application) framework with koa/react/react-router/redux/typescript, and using reactjs stack(react component/react-router/react-redux) and &quot;isomorphic&quot; codes (used in both browser and server side).</p>\n<p>Actually this framework is my experimental work to explore the advanced area of javascript and node.js, like &quot;isomorphic&quot; in reactjs stack(react component/react-router/react-redux), async/await, typescript, es7 decorator, etc.</p>\n<h3>Features</h3>\n<ul>\n<li>completely and seamlessly SSR/SPA solution</li>\n<li>&quot;isomorphic&quot; component/router/redux/ajax in both client and server side</li>\n<li>typescript</li>\n<li>es7 decorator/async coding style</li>\n</ul>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p><a href=\"https://koa-cola-zh-cn.github.io/\" target=\"_blank\" rel=\"external\">中文版</a></p>\n<p><a href=\"https://koa-cola.github.io/\" target=\"_blank\" rel=\"external\">koa-cola</a> is SSR(server side render)/SPA(singe page application) framework with koa/react/react-router/redux/typescript, and using reactjs stack(react component/react-router/react-redux) and &quot;isomorphic&quot; codes (used in both browser and server side).</p>\n<p>Actually this framework is my experimental work to explore the advanced area of javascript and node.js, like &quot;isomorphic&quot; in reactjs stack(react component/react-router/react-redux), async/await, typescript, es7 decorator, etc.</p>\n<h3>Features</h3>\n<ul>\n<li>completely and seamlessly SSR/SPA solution</li>\n<li>&quot;isomorphic&quot; component/router/redux/ajax in both client and server side</li>\n<li>typescript</li>\n<li>es7 decorator/async coding style</li>\n</ul>\n"},{"layout":"default","id":"tip4-cluster","title":"Cluster mode","prev":"tip3-inject-global.html","next":"tip5-debug.html","_content":"\nIf you want to use cluster mode, koa-cola provide configuration file of pm2. change pm2 configuration if needed and running this to start:\n\n```shell\npm2 start pm2.config.js\n```\n\npm2.config.js\n\n```javascript\n{\n    name: 'koa-cola-app',\n    script: __dirname + '/app.ts',\n    instances: 2,\n    interpreter: 'ts-node',\n    exec_mode: 'cluster'\n}\n```","source":"tip4-cluster.md","raw":"---\nlayout: default\nid: tip4-cluster\ntitle: Cluster mode\nprev: tip3-inject-global.html\nnext: tip5-debug.html\n---\n\nIf you want to use cluster mode, koa-cola provide configuration file of pm2. change pm2 configuration if needed and running this to start:\n\n```shell\npm2 start pm2.config.js\n```\n\npm2.config.js\n\n```javascript\n{\n    name: 'koa-cola-app',\n    script: __dirname + '/app.ts',\n    instances: 2,\n    interpreter: 'ts-node',\n    exec_mode: 'cluster'\n}\n```","date":"2017-11-23T08:53:01.946Z","updated":"2017-11-23T08:53:01.946Z","path":"tip4-cluster.html","comments":1,"_id":"cjhu90g8d000c5oiviamvs5ti","content":"<p>If you want to use cluster mode, koa-cola provide configuration file of pm2. change pm2 configuration if needed and running this to start:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 start pm2.config.js</div></pre></td></tr></table></figure>\n<p>pm2.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    name: <span class=\"string\">'koa-cola-app'</span>,</div><div class=\"line\">    script: __dirname + <span class=\"string\">'/app.ts'</span>,</div><div class=\"line\">    instances: <span class=\"number\">2</span>,</div><div class=\"line\">    interpreter: <span class=\"string\">'ts-node'</span>,</div><div class=\"line\">    exec_mode: <span class=\"string\">'cluster'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>If you want to use cluster mode, koa-cola provide configuration file of pm2. change pm2 configuration if needed and running this to start:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 start pm2.config.js</div></pre></td></tr></table></figure>\n<p>pm2.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    name: <span class=\"string\">'koa-cola-app'</span>,</div><div class=\"line\">    script: __dirname + <span class=\"string\">'/app.ts'</span>,</div><div class=\"line\">    instances: <span class=\"number\">2</span>,</div><div class=\"line\">    interpreter: <span class=\"string\">'ts-node'</span>,</div><div class=\"line\">    exec_mode: <span class=\"string\">'cluster'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"ssr","title":"SSR & SPA","prev":"index.html","next":"compare-next.html","_content":"\nkoa-cola is a SSR/SPA solution framework.\n\nOn the server side, koa-cola support SSR(Server Side Render), which using react as a template component and render view to client. \n\nOn the client side, js bundle base on react-router and redux and run as SPA(Single Page Application) architecture.\n\neither SSR or SPA has each cons and pros, but when they work together in koa-cola, then you will have both pros and avoid cons. \nSPA of course have better user experience, but it is bad for search engine. \ndevelop SSR/SPA by using koa-cola, we don't need to care about the code we are writing whether need to be running in SSR or SPA. actually they run in both environment like react component/redux/ajax. what you care about is only business logic. koa-cola will resolve issues in these different environments.\n\nlet us take codes below for example\n\n```javascript\n@Cola({\n  initData : {\n    some_data : async ({ params, helpers}) => {\n      return await fetch('/some/data/api');\n    }\n  }\n})\nclass Index extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.some_data}\n    </div>;\n  }\n}\nexport default Index;\n```\n The react component is using Cola decorator to initialize data in the koa-cola project.\n \n * In SSR mode, before page loaded, koa-cola will fetch data first in server side, then render html to client.\n * In SPA mode, like when click `<link>` in browser, koa-cola will call fetch api in browser, then re-render the component in client side.\n\n so yes, you can see the codes above demostrate that both client and server side use react/redux/fetch.\n\n\n","source":"ssr.md","raw":"---\nlayout: default\nid: ssr\ntitle: SSR & SPA\nprev: index.html\nnext: compare-next.html\n---\n\nkoa-cola is a SSR/SPA solution framework.\n\nOn the server side, koa-cola support SSR(Server Side Render), which using react as a template component and render view to client. \n\nOn the client side, js bundle base on react-router and redux and run as SPA(Single Page Application) architecture.\n\neither SSR or SPA has each cons and pros, but when they work together in koa-cola, then you will have both pros and avoid cons. \nSPA of course have better user experience, but it is bad for search engine. \ndevelop SSR/SPA by using koa-cola, we don't need to care about the code we are writing whether need to be running in SSR or SPA. actually they run in both environment like react component/redux/ajax. what you care about is only business logic. koa-cola will resolve issues in these different environments.\n\nlet us take codes below for example\n\n```javascript\n@Cola({\n  initData : {\n    some_data : async ({ params, helpers}) => {\n      return await fetch('/some/data/api');\n    }\n  }\n})\nclass Index extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.some_data}\n    </div>;\n  }\n}\nexport default Index;\n```\n The react component is using Cola decorator to initialize data in the koa-cola project.\n \n * In SSR mode, before page loaded, koa-cola will fetch data first in server side, then render html to client.\n * In SPA mode, like when click `<link>` in browser, koa-cola will call fetch api in browser, then re-render the component in client side.\n\n so yes, you can see the codes above demostrate that both client and server side use react/redux/fetch.\n\n\n","date":"2017-11-23T08:52:48.537Z","updated":"2017-11-23T08:52:48.537Z","path":"ssr.html","comments":1,"_id":"cjhu90g8f000d5oiviymp18eh","content":"<p>koa-cola is a SSR/SPA solution framework.</p>\n<p>On the server side, koa-cola support SSR(Server Side Render), which using react as a template component and render view to client.</p>\n<p>On the client side, js bundle base on react-router and redux and run as SPA(Single Page Application) architecture.</p>\n<p>either SSR or SPA has each cons and pros, but when they work together in koa-cola, then you will have both pros and avoid cons.<br>\nSPA of course have better user experience, but it is bad for search engine.<br>\ndevelop SSR/SPA by using koa-cola, we don't need to care about the code we are writing whether need to be running in SSR or SPA. actually they run in both environment like react component/redux/ajax. what you care about is only business logic. koa-cola will resolve issues in these different environments.</p>\n<p>let us take codes below for example</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    some_data : <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/some/data/api'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.some_data&#125;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index;</div></pre></td></tr></table></figure>\n<p>The react component is using Cola decorator to initialize data in the koa-cola project.</p>\n<ul>\n<li>In SSR mode, before page loaded, koa-cola will fetch data first in server side, then render html to client.</li>\n<li>In SPA mode, like when click <code>&lt;link&gt;</code> in browser, koa-cola will call fetch api in browser, then re-render the component in client side.</li>\n</ul>\n<p>so yes, you can see the codes above demostrate that both client and server side use react/redux/fetch.</p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola is a SSR/SPA solution framework.</p>\n<p>On the server side, koa-cola support SSR(Server Side Render), which using react as a template component and render view to client.</p>\n<p>On the client side, js bundle base on react-router and redux and run as SPA(Single Page Application) architecture.</p>\n<p>either SSR or SPA has each cons and pros, but when they work together in koa-cola, then you will have both pros and avoid cons.<br>\nSPA of course have better user experience, but it is bad for search engine.<br>\ndevelop SSR/SPA by using koa-cola, we don't need to care about the code we are writing whether need to be running in SSR or SPA. actually they run in both environment like react component/redux/ajax. what you care about is only business logic. koa-cola will resolve issues in these different environments.</p>\n<p>let us take codes below for example</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    some_data : <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/some/data/api'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.some_data&#125;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index;</div></pre></td></tr></table></figure>\n<p>The react component is using Cola decorator to initialize data in the koa-cola project.</p>\n<ul>\n<li>In SSR mode, before page loaded, koa-cola will fetch data first in server side, then render html to client.</li>\n<li>In SPA mode, like when click <code>&lt;link&gt;</code> in browser, koa-cola will call fetch api in browser, then re-render the component in client side.</li>\n</ul>\n<p>so yes, you can see the codes above demostrate that both client and server side use react/redux/fetch.</p>\n"},{"layout":"default","id":"tip2-redux","title":"Using redux in Cola","prev":"tip1-react-init.html","next":"tip3-inject-global.html","_content":"\n## About the props key name conflicts between `Cola` and `mapStateToProps`\nUsing `Cola` decorators for data initialization, it's better to use the different key name of `initData` and `mapStateToProps`.\nIf the key name in `initData` conflicts with the name defined in `mapStateToProps` , data in `initData` will be prior than `mapStateToProps`.\n\nThe following example defines the data `foo`, and `mapStateToProps` also defines `foo`. and execute `dispatch` to change `foo` value to `bar again`, but as we had set `foo` in the `initData`, the dispatching action will not work, `foo` value will still be `bar`.\n\n```javascript\nconst {Cola, store} = require('koa-cola/client');\n@Cola({\n    initData : {\n        foo : async ({ params, helpers, store: { dispatch } }) => {\n            return await Promise.resolve('bar');\n        }\n    },\n    mapStateToProps : ({ fooState }) => {\n        return {\n            foo : fooState\n        };\n    },\n    mapDispatchToProps : dispatch => {\n        return {\n            changeFoo: () => {\n                dispatch({\n                    type: 'CHANGE_FOO'\n                });\n            }\n        };\n    },\n    reducer : {\n        fooState : (state = '', action) => {\n            switch (action.type) {\n                case 'CHANGE_FOO':\n                    return 'bar again';\n                default:\n                    return state;\n            }\n        }\n    }\n})\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.foo}\n        <button onClick={() => this.props.changeFoo()}>change foo</button>\n    </div>;\n  }\n}\nexport default Some_Page;\n```\n\nIf you still want to change `props.foo`, you can use `dispatch(loadSuccess(...));` :\n\n```javascript\nconst loadSuccess = store.loadSuccess;\n...\n...\nchangeFoo: () => {\n    dispatch(loadSuccess('foo', 'bar again'));\n}\n```","source":"tip2-redux.md","raw":"---\nlayout: default\nid: tip2-redux\ntitle: Using redux in Cola\nprev: tip1-react-init.html\nnext: tip3-inject-global.html\n---\n\n## About the props key name conflicts between `Cola` and `mapStateToProps`\nUsing `Cola` decorators for data initialization, it's better to use the different key name of `initData` and `mapStateToProps`.\nIf the key name in `initData` conflicts with the name defined in `mapStateToProps` , data in `initData` will be prior than `mapStateToProps`.\n\nThe following example defines the data `foo`, and `mapStateToProps` also defines `foo`. and execute `dispatch` to change `foo` value to `bar again`, but as we had set `foo` in the `initData`, the dispatching action will not work, `foo` value will still be `bar`.\n\n```javascript\nconst {Cola, store} = require('koa-cola/client');\n@Cola({\n    initData : {\n        foo : async ({ params, helpers, store: { dispatch } }) => {\n            return await Promise.resolve('bar');\n        }\n    },\n    mapStateToProps : ({ fooState }) => {\n        return {\n            foo : fooState\n        };\n    },\n    mapDispatchToProps : dispatch => {\n        return {\n            changeFoo: () => {\n                dispatch({\n                    type: 'CHANGE_FOO'\n                });\n            }\n        };\n    },\n    reducer : {\n        fooState : (state = '', action) => {\n            switch (action.type) {\n                case 'CHANGE_FOO':\n                    return 'bar again';\n                default:\n                    return state;\n            }\n        }\n    }\n})\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>\n        {this.props.foo}\n        <button onClick={() => this.props.changeFoo()}>change foo</button>\n    </div>;\n  }\n}\nexport default Some_Page;\n```\n\nIf you still want to change `props.foo`, you can use `dispatch(loadSuccess(...));` :\n\n```javascript\nconst loadSuccess = store.loadSuccess;\n...\n...\nchangeFoo: () => {\n    dispatch(loadSuccess('foo', 'bar again'));\n}\n```","date":"2017-11-23T08:53:01.946Z","updated":"2017-11-23T08:53:01.946Z","path":"tip2-redux.html","comments":1,"_id":"cjhu90g8g000e5oiv2sa4w7gu","content":"<h2>About the props key name conflicts between <code>Cola</code> and <code>mapStateToProps</code></h2>\n<p>Using <code>Cola</code> decorators for data initialization, it's better to use the different key name of <code>initData</code> and <code>mapStateToProps</code>.<br>\nIf the key name in <code>initData</code> conflicts with the name defined in <code>mapStateToProps</code> , data in <code>initData</code> will be prior than <code>mapStateToProps</code>.</p>\n<p>The following example defines the data <code>foo</code>, and <code>mapStateToProps</code> also defines <code>foo</code>. and execute <code>dispatch</code> to change <code>foo</code> value to <code>bar again</code>, but as we had set <code>foo</code> in the <code>initData</code>, the dispatching action will not work, <code>foo</code> value will still be <code>bar</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;Cola, store&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        foo : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mapStateToProps : <span class=\"function\">(<span class=\"params\">&#123; fooState &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : fooState</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mapDispatchToProps : <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                dispatch(&#123;</div><div class=\"line\">                    type: <span class=\"string\">'CHANGE_FOO'</span></div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    reducer : &#123;</div><div class=\"line\">        fooState : <span class=\"function\">(<span class=\"params\">state = <span class=\"string\">''</span>, action</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'CHANGE_FOO'</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">'bar again'</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> state;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.foo&#125;</div><div class=\"line\">        &lt;button onClick=&#123;() =&gt; this.props.changeFoo()&#125;&gt;change foo&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n<p>If you still want to change <code>props.foo</code>, you can use <code>dispatch(loadSuccess(...));</code> :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> loadSuccess = store.loadSuccess;</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    dispatch(loadSuccess(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar again'</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h2>About the props key name conflicts between <code>Cola</code> and <code>mapStateToProps</code></h2>\n<p>Using <code>Cola</code> decorators for data initialization, it's better to use the different key name of <code>initData</code> and <code>mapStateToProps</code>.<br>\nIf the key name in <code>initData</code> conflicts with the name defined in <code>mapStateToProps</code> , data in <code>initData</code> will be prior than <code>mapStateToProps</code>.</p>\n<p>The following example defines the data <code>foo</code>, and <code>mapStateToProps</code> also defines <code>foo</code>. and execute <code>dispatch</code> to change <code>foo</code> value to <code>bar again</code>, but as we had set <code>foo</code> in the <code>initData</code>, the dispatching action will not work, <code>foo</code> value will still be <code>bar</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;Cola, store&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        foo : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mapStateToProps : <span class=\"function\">(<span class=\"params\">&#123; fooState &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            foo : fooState</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mapDispatchToProps : <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                dispatch(&#123;</div><div class=\"line\">                    type: <span class=\"string\">'CHANGE_FOO'</span></div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    reducer : &#123;</div><div class=\"line\">        fooState : <span class=\"function\">(<span class=\"params\">state = <span class=\"string\">''</span>, action</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'CHANGE_FOO'</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">'bar again'</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> state;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;</div><div class=\"line\">        &#123;this.props.foo&#125;</div><div class=\"line\">        &lt;button onClick=&#123;() =&gt; this.props.changeFoo()&#125;&gt;change foo&lt;/button&gt;</div><div class=\"line\">    &lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n<p>If you still want to change <code>props.foo</code>, you can use <code>dispatch(loadSuccess(...));</code> :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> loadSuccess = store.loadSuccess;</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">changeFoo: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    dispatch(loadSuccess(<span class=\"string\">'foo'</span>, <span class=\"string\">'bar again'</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"tip3-inject-global","title":"Inject global","prev":"tip2-redux.html","next":"tip4-cluster.html","_content":"\nSomehow we want to require koa-cola project files but without running the project, if the file contain global refer which base on run-time like `app.xxx`, this will thow a exception, in this particular situation we need use `reqInject` to inject `global.app`.\n\n```javascript\nimport { reqInject } from 'koa-cola'\nlet user;\nreqInject(function(){\n    // after injection, we can require any files inside project.\n    user = require('./api/models/user').default \n    // or get the global variable directly\n    let config = app.config;\n});\n```","source":"tip3-inject-global.md","raw":"---\nlayout: default\nid: tip3-inject-global\ntitle: Inject global\nprev: tip2-redux.html\nnext: tip4-cluster.html\n---\n\nSomehow we want to require koa-cola project files but without running the project, if the file contain global refer which base on run-time like `app.xxx`, this will thow a exception, in this particular situation we need use `reqInject` to inject `global.app`.\n\n```javascript\nimport { reqInject } from 'koa-cola'\nlet user;\nreqInject(function(){\n    // after injection, we can require any files inside project.\n    user = require('./api/models/user').default \n    // or get the global variable directly\n    let config = app.config;\n});\n```","date":"2017-11-23T08:53:01.946Z","updated":"2017-11-23T08:53:01.946Z","path":"tip3-inject-global.html","comments":1,"_id":"cjhu90g8g000f5oiva77c47wo","content":"<p>Somehow we want to require koa-cola project files but without running the project, if the file contain global refer which base on run-time like <code>app.xxx</code>, this will thow a exception, in this particular situation we need use <code>reqInject</code> to inject <code>global.app</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; reqInject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">let</span> user;</div><div class=\"line\">reqInject(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// after injection, we can require any files inside project.</span></div><div class=\"line\">    user = <span class=\"built_in\">require</span>(<span class=\"string\">'./api/models/user'</span>).default </div><div class=\"line\">    <span class=\"comment\">// or get the global variable directly</span></div><div class=\"line\">    <span class=\"keyword\">let</span> config = app.config;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>Somehow we want to require koa-cola project files but without running the project, if the file contain global refer which base on run-time like <code>app.xxx</code>, this will thow a exception, in this particular situation we need use <code>reqInject</code> to inject <code>global.app</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; reqInject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'koa-cola'</span></div><div class=\"line\"><span class=\"keyword\">let</span> user;</div><div class=\"line\">reqInject(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// after injection, we can require any files inside project.</span></div><div class=\"line\">    user = <span class=\"built_in\">require</span>(<span class=\"string\">'./api/models/user'</span>).default </div><div class=\"line\">    <span class=\"comment\">// or get the global variable directly</span></div><div class=\"line\">    <span class=\"keyword\">let</span> config = app.config;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"layout":"default","id":"tip6-compile","title":"Compiling","prev":"tip5-debug.html","_content":"\n\n### Browser side\n<!-- 前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成[webpack配置](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)ts文件的loader使用了[awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader)，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。 -->\n\nThe front-end bundle is builded by webpack. When using the cli command to create a project, it will be automatically generated [webpack config](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)\n\nWe used [awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader) as ts loader, and has config babel, add `babel-polyfill` to bundle. it will support ie9+.\n\nThe entry of webpack is `view/app.tsx` in the project by default.\n\n```javascript\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport IndexController from '../api/controllers/IndexController';\n// The following 3 modules are the entrance of react components.\nimport index from './pages/index';\nimport officialDemo from './pages/officialDemo';\nimport colastyleDemo from './pages/colastyleDemo';\n\nconst { createProvider } = require('koa-cola');\n// using createProvider provided by koa-cola will automatically create router，\n// If want to the official Provider, we will need to write router by ourselves\nconst Provider = createProvider([IndexController], {\n  index,\n  officialDemo,\n  colastyleDemo\n});\n\nrender(<Provider />, document.getElementById('app'));\n```\n\nRun `webpack build` to build the default project, it will generate a bundle of size at about 400K. Dependent library composition as shown below:\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"/>\n\nThe default `webpack.config.js` has four IgnorePlugin plugins, because some files are required at both front and server side, so we need to ignore the server-side requires.\n\n```javascript\n// The following two are for server-side use, no need package into webpack\nnew webpack.IgnorePlugin(/\\.\\/src\\/app/),\nnew webpack.IgnorePlugin(/\\.\\/src\\/util\\/injectGlobal/),\n// The following two are controller references, used on the server-side, so must be ignored by webpack. \n// If your controller also has a server-side library, you must also add IgnorePlugin plug-in.\nnew webpack.IgnorePlugin(/koa$/),\nnew webpack.IgnorePlugin(/koa-body$/),\n```\n\n","source":"tip6-compile.md","raw":"---\nlayout: default\nid: tip6-compile\ntitle: Compiling\nprev: tip5-debug.html\n---\n\n\n### Browser side\n<!-- 前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成[webpack配置](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)ts文件的loader使用了[awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader)，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。 -->\n\nThe front-end bundle is builded by webpack. When using the cli command to create a project, it will be automatically generated [webpack config](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)\n\nWe used [awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader) as ts loader, and has config babel, add `babel-polyfill` to bundle. it will support ie9+.\n\nThe entry of webpack is `view/app.tsx` in the project by default.\n\n```javascript\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport IndexController from '../api/controllers/IndexController';\n// The following 3 modules are the entrance of react components.\nimport index from './pages/index';\nimport officialDemo from './pages/officialDemo';\nimport colastyleDemo from './pages/colastyleDemo';\n\nconst { createProvider } = require('koa-cola');\n// using createProvider provided by koa-cola will automatically create router，\n// If want to the official Provider, we will need to write router by ourselves\nconst Provider = createProvider([IndexController], {\n  index,\n  officialDemo,\n  colastyleDemo\n});\n\nrender(<Provider />, document.getElementById('app'));\n```\n\nRun `webpack build` to build the default project, it will generate a bundle of size at about 400K. Dependent library composition as shown below:\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"/>\n\nThe default `webpack.config.js` has four IgnorePlugin plugins, because some files are required at both front and server side, so we need to ignore the server-side requires.\n\n```javascript\n// The following two are for server-side use, no need package into webpack\nnew webpack.IgnorePlugin(/\\.\\/src\\/app/),\nnew webpack.IgnorePlugin(/\\.\\/src\\/util\\/injectGlobal/),\n// The following two are controller references, used on the server-side, so must be ignored by webpack. \n// If your controller also has a server-side library, you must also add IgnorePlugin plug-in.\nnew webpack.IgnorePlugin(/koa$/),\nnew webpack.IgnorePlugin(/koa-body$/),\n```\n\n","date":"2017-12-18T03:25:28.469Z","updated":"2017-12-18T03:25:28.469Z","path":"tip6-compile.html","comments":1,"_id":"cjhu90g8h000g5oiv4iqy9hln","content":"<h3>Browser side</h3>\n<!-- 前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成[webpack配置](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)ts文件的loader使用了[awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader)，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。 -->\n<p>The front-end bundle is builded by webpack. When using the cli command to create a project, it will be automatically generated <a href=\"https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js\" target=\"_blank\" rel=\"external\">webpack config</a></p>\n<p>We used <a href=\"https://github.com/s-panferov/awesome-typescript-loader\" target=\"_blank\" rel=\"external\">awesome-typescript-loader</a> as ts loader, and has config babel, add <code>babel-polyfill</code> to bundle. it will support ie9+.</p>\n<p>The entry of webpack is <code>view/app.tsx</code> in the project by default.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> IndexController <span class=\"keyword\">from</span> <span class=\"string\">'../api/controllers/IndexController'</span>;</div><div class=\"line\"><span class=\"comment\">// The following 3 modules are the entrance of react components.</span></div><div class=\"line\"><span class=\"keyword\">import</span> index <span class=\"keyword\">from</span> <span class=\"string\">'./pages/index'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> officialDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/officialDemo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> colastyleDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/colastyleDemo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; createProvider &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>);</div><div class=\"line\"><span class=\"comment\">// using createProvider provided by koa-cola will automatically create router，</span></div><div class=\"line\"><span class=\"comment\">// If want to the official Provider, we will need to write router by ourselves</span></div><div class=\"line\"><span class=\"keyword\">const</span> Provider = createProvider([IndexController], &#123;</div><div class=\"line\">  index,</div><div class=\"line\">  officialDemo,</div><div class=\"line\">  colastyleDemo</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">render(&lt;Provider /&gt;, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<p>Run <code>webpack build</code> to build the default project, it will generate a bundle of size at about 400K. Dependent library composition as shown below:</p>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"></p>\n<p>The default <code>webpack.config.js</code> has four IgnorePlugin plugins, because some files are required at both front and server side, so we need to ignore the server-side requires.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The following two are for server-side use, no need package into webpack</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/app/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/util\\/injectGlobal/</span>),</div><div class=\"line\"><span class=\"comment\">// The following two are controller references, used on the server-side, so must be ignored by webpack. </span></div><div class=\"line\"><span class=\"comment\">// If your controller also has a server-side library, you must also add IgnorePlugin plug-in.</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa$/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa-body$/</span>),</div></pre></td></tr></table></figure>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h3>Browser side</h3>\n<!-- 前端的bundle build使用webpack来构建，使用cli命令创建项目，会自动生成[webpack配置](https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js)ts文件的loader使用了[awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader)，并配置了使用babel，加入babel-polyfill到bundle，可以兼容ie9+。 -->\n<p>The front-end bundle is builded by webpack. When using the cli command to create a project, it will be automatically generated <a href=\"https://github.com/hcnode/koa-cola/blob/master/template/webpack.config.js\" target=\"_blank\" rel=\"external\">webpack config</a></p>\n<p>We used <a href=\"https://github.com/s-panferov/awesome-typescript-loader\" target=\"_blank\" rel=\"external\">awesome-typescript-loader</a> as ts loader, and has config babel, add <code>babel-polyfill</code> to bundle. it will support ie9+.</p>\n<p>The entry of webpack is <code>view/app.tsx</code> in the project by default.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> IndexController <span class=\"keyword\">from</span> <span class=\"string\">'../api/controllers/IndexController'</span>;</div><div class=\"line\"><span class=\"comment\">// The following 3 modules are the entrance of react components.</span></div><div class=\"line\"><span class=\"keyword\">import</span> index <span class=\"keyword\">from</span> <span class=\"string\">'./pages/index'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> officialDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/officialDemo'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> colastyleDemo <span class=\"keyword\">from</span> <span class=\"string\">'./pages/colastyleDemo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; createProvider &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola'</span>);</div><div class=\"line\"><span class=\"comment\">// using createProvider provided by koa-cola will automatically create router，</span></div><div class=\"line\"><span class=\"comment\">// If want to the official Provider, we will need to write router by ourselves</span></div><div class=\"line\"><span class=\"keyword\">const</span> Provider = createProvider([IndexController], &#123;</div><div class=\"line\">  index,</div><div class=\"line\">  officialDemo,</div><div class=\"line\">  colastyleDemo</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">render(&lt;Provider /&gt;, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<p>Run <code>webpack build</code> to build the default project, it will generate a bundle of size at about 400K. Dependent library composition as shown below:</p>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/bundle.png\" alt=\"Drawing\" width=\"800\"></p>\n<p>The default <code>webpack.config.js</code> has four IgnorePlugin plugins, because some files are required at both front and server side, so we need to ignore the server-side requires.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The following two are for server-side use, no need package into webpack</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/app/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/\\.\\/src\\/util\\/injectGlobal/</span>),</div><div class=\"line\"><span class=\"comment\">// The following two are controller references, used on the server-side, so must be ignored by webpack. </span></div><div class=\"line\"><span class=\"comment\">// If your controller also has a server-side library, you must also add IgnorePlugin plug-in.</span></div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa$/</span>),</div><div class=\"line\"><span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/koa-body$/</span>),</div></pre></td></tr></table></figure>\n"},{"layout":"default","id":"tip5-debug","title":"Debugging","prev":"tip4-cluster.html","next":"tip6-compile.html","_content":"\nWhen debugging a koa-cola project, we need to add two dependencies: \n\n```shell\nnpm i ts-node typescript -S\n```\n\nand add debug config in vscode:\n\n```json\n{\n    \"name\": \"DebugApp\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceRoot}/node_modules/ts-node/dist/_bin.js\",\n    \"stopOnEntry\": false,\n    \"args\": [],\n    \"runtimeArgs\": [\n        \"-r\", \"ts-node/register\",\n        \"${workspaceRoot}/app.ts\"\n    ],\n    \"sourceMaps\": true,\n    \"console\": \"internalConsole\",\n    \"internalConsoleOptions\": \"openOnSessionStart\"\n}\n```\n<!-- 便可享受vscode的调试ts的乐趣。另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试： -->\nThen we can debug ts via vscode.\n\nIn addition, koa-cola integrate redux debug tool, we can use the chrome's redux plug-in:\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"/>\n","source":"tip5-debug.md","raw":"---\nlayout: default\nid: tip5-debug\ntitle: Debugging\nprev: tip4-cluster.html\nnext: tip6-compile.html\n---\n\nWhen debugging a koa-cola project, we need to add two dependencies: \n\n```shell\nnpm i ts-node typescript -S\n```\n\nand add debug config in vscode:\n\n```json\n{\n    \"name\": \"DebugApp\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceRoot}/node_modules/ts-node/dist/_bin.js\",\n    \"stopOnEntry\": false,\n    \"args\": [],\n    \"runtimeArgs\": [\n        \"-r\", \"ts-node/register\",\n        \"${workspaceRoot}/app.ts\"\n    ],\n    \"sourceMaps\": true,\n    \"console\": \"internalConsole\",\n    \"internalConsoleOptions\": \"openOnSessionStart\"\n}\n```\n<!-- 便可享受vscode的调试ts的乐趣。另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试： -->\nThen we can debug ts via vscode.\n\nIn addition, koa-cola integrate redux debug tool, we can use the chrome's redux plug-in:\n\n<img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"/>\n","date":"2017-12-18T03:25:28.469Z","updated":"2017-12-18T03:25:28.469Z","path":"tip5-debug.html","comments":1,"_id":"cjhu90g8i000h5oivv9g8pgnq","content":"<p>When debugging a koa-cola project, we need to add two dependencies:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i ts-node typescript -S</div></pre></td></tr></table></figure>\n<p>and add debug config in vscode:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"DebugApp\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/node_modules/ts-node/dist/_bin.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">\"args\"</span>: [],</div><div class=\"line\">    <span class=\"attr\">\"runtimeArgs\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"-r\"</span>, <span class=\"string\">\"ts-node/register\"</span>,</div><div class=\"line\">        <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.ts\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"sourceMaps\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"console\"</span>: <span class=\"string\">\"internalConsole\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"internalConsoleOptions\"</span>: <span class=\"string\">\"openOnSessionStart\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<!-- 便可享受vscode的调试ts的乐趣。另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试： -->\nThen we can debug ts via vscode.\n<p>In addition, koa-cola integrate redux debug tool, we can use the chrome's redux plug-in:</p>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"></p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>When debugging a koa-cola project, we need to add two dependencies:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i ts-node typescript -S</div></pre></td></tr></table></figure>\n<p>and add debug config in vscode:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"DebugApp\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/node_modules/ts-node/dist/_bin.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">\"args\"</span>: [],</div><div class=\"line\">    <span class=\"attr\">\"runtimeArgs\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"-r\"</span>, <span class=\"string\">\"ts-node/register\"</span>,</div><div class=\"line\">        <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.ts\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"sourceMaps\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"console\"</span>: <span class=\"string\">\"internalConsole\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"internalConsoleOptions\"</span>: <span class=\"string\">\"openOnSessionStart\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<!-- 便可享受vscode的调试ts的乐趣。另外，koa-cola加了redux调试支持，你也可以使用chrome的redux插件调试： -->\nThen we can debug ts via vscode.\n<p>In addition, koa-cola integrate redux debug tool, we can use the chrome's redux plug-in:</p>\n<p><img src=\"https://github.com/hcnode/koa-cola/raw/master/screenshots/dev-tool.png\" alt=\"Drawing\" width=\"600\"></p>\n"},{"layout":"default","id":"views-pages","title":"pages","prev":"views.html","next":"views-app.html","_content":"\nviews/pages place page components.\n\nin controller, define a method with a `View` decorator:\n```javascript\n@Get('/some_page')  \n@View('some_page')\nsome_page () {}\n```\n\nwhen visit `/some_page` in server side koa-cola will get  `views/pages/some_page.tsx` as page view to render to client, in client side, webpack will build these router and component into bundle and auto render in browser.\n\nwhen raised a error like 404 or 500, koa-cola will looking for the correspondent file in views/pages like `404.tsx` or `500.tsx`.\n\nviews/pages/layout.ts is as the layout file koa-cola eventually render the page, if the file does not exist, the page component will render directly.\n\nlayout.ts by default:\n```javascript\nexport default function(html){\n    return `\n    <!doctype html>\n    <html>\n        <body id=\"app\">${html}</body>\n    </html>\n    <script src=\"/bundle.js\"></script>\n        `\n}\n```\n\nkoa-cola render `window.__data` as redux store serialization after `</body>`.\n\n```html\n<!doctype html>\n<html>\n    <body id=\"app\">${html}</body>\n    <script>\n        window.__data= {/*json of redux store*/}\n    </script>\n</html>\n<!-- bundle js goes after window.__data, only one bundle.js by default, seperate into serveral bundle js if needed -->\n<script src=\"/bundle.js\"></script>\n```\n\nif you don't want a particular page to use layout.ts as the page wrapper, you can use decorator \"doNotUseLayout\" like this:\n\n```javascript\nconst {doNotUseLayout} = require('koa-cola/client');\n@doNotUseLayout\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```\n\nand in this case, you can define the header element and bundle js or other resource like css by using decorator `bundle` and `header` like this:\n\n```javascript\nconst {header, bundle, doNotUseLayout} = require('koa-cola/client');\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```","source":"views-pages.md","raw":"---\nlayout: default\nid: views-pages\ntitle: pages\nprev: views.html\nnext: views-app.html\n---\n\nviews/pages place page components.\n\nin controller, define a method with a `View` decorator:\n```javascript\n@Get('/some_page')  \n@View('some_page')\nsome_page () {}\n```\n\nwhen visit `/some_page` in server side koa-cola will get  `views/pages/some_page.tsx` as page view to render to client, in client side, webpack will build these router and component into bundle and auto render in browser.\n\nwhen raised a error like 404 or 500, koa-cola will looking for the correspondent file in views/pages like `404.tsx` or `500.tsx`.\n\nviews/pages/layout.ts is as the layout file koa-cola eventually render the page, if the file does not exist, the page component will render directly.\n\nlayout.ts by default:\n```javascript\nexport default function(html){\n    return `\n    <!doctype html>\n    <html>\n        <body id=\"app\">${html}</body>\n    </html>\n    <script src=\"/bundle.js\"></script>\n        `\n}\n```\n\nkoa-cola render `window.__data` as redux store serialization after `</body>`.\n\n```html\n<!doctype html>\n<html>\n    <body id=\"app\">${html}</body>\n    <script>\n        window.__data= {/*json of redux store*/}\n    </script>\n</html>\n<!-- bundle js goes after window.__data, only one bundle.js by default, seperate into serveral bundle js if needed -->\n<script src=\"/bundle.js\"></script>\n```\n\nif you don't want a particular page to use layout.ts as the page wrapper, you can use decorator \"doNotUseLayout\" like this:\n\n```javascript\nconst {doNotUseLayout} = require('koa-cola/client');\n@doNotUseLayout\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```\n\nand in this case, you can define the header element and bundle js or other resource like css by using decorator `bundle` and `header` like this:\n\n```javascript\nconst {header, bundle, doNotUseLayout} = require('koa-cola/client');\n@doNotUseLayout\n@bundle([\n  \"/bundle.js\",\n  \"/test.js\"\n])\n@header(() => {\n  return <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n  </head>\n})\nclass Page extends React.Component<Props, States>   {\n    ...\n}\n```","date":"2017-11-23T08:53:36.487Z","updated":"2017-11-23T08:53:36.487Z","path":"views-pages.html","comments":1,"_id":"cjhu90g8i000i5oivnywxpxau","content":"<p>views/pages place page components.</p>\n<p>in controller, define a method with a <code>View</code> decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Get(<span class=\"string\">'/some_page'</span>)  </div><div class=\"line\">@View(<span class=\"string\">'some_page'</span>)</div><div class=\"line\">some_page () &#123;&#125;</div></pre></td></tr></table></figure>\n<p>when visit <code>/some_page</code> in server side koa-cola will get  <code>views/pages/some_page.tsx</code> as page view to render to client, in client side, webpack will build these router and component into bundle and auto render in browser.</p>\n<p>when raised a error like 404 or 500, koa-cola will looking for the correspondent file in views/pages like <code>404.tsx</code> or <code>500.tsx</code>.</p>\n<p>views/pages/layout.ts is as the layout file koa-cola eventually render the page, if the file does not exist, the page component will render directly.</p>\n<p>layout.ts by default:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">    &lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;html&gt;</span></div><div class=\"line\"><span class=\"string\">        &lt;body id=\"app\"&gt;<span class=\"subst\">$&#123;html&#125;</span>&lt;/body&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;script src=\"/bundle.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"string\">        `</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola render <code>window.__data</code> as redux store serialization after <code>&lt;/body&gt;</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>$&#123;html&#125;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.__data= &#123;<span class=\"comment\">/*json of redux store*/</span>&#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- bundle js goes after window.__data, only one bundle.js by default, seperate into serveral bundle js if needed --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>if you don't want a particular page to use layout.ts as the page wrapper, you can use decorator &quot;doNotUseLayout&quot; like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>and in this case, you can define the header element and bundle js or other resource like css by using decorator <code>bundle</code> and <code>header</code> like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;header, bundle, doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">&#125;)</span></div><div class=\"line\">class Page extends React.Component&lt;Props, States&gt;   &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>views/pages place page components.</p>\n<p>in controller, define a method with a <code>View</code> decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Get(<span class=\"string\">'/some_page'</span>)  </div><div class=\"line\">@View(<span class=\"string\">'some_page'</span>)</div><div class=\"line\">some_page () &#123;&#125;</div></pre></td></tr></table></figure>\n<p>when visit <code>/some_page</code> in server side koa-cola will get  <code>views/pages/some_page.tsx</code> as page view to render to client, in client side, webpack will build these router and component into bundle and auto render in browser.</p>\n<p>when raised a error like 404 or 500, koa-cola will looking for the correspondent file in views/pages like <code>404.tsx</code> or <code>500.tsx</code>.</p>\n<p>views/pages/layout.ts is as the layout file koa-cola eventually render the page, if the file does not exist, the page component will render directly.</p>\n<p>layout.ts by default:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">    &lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;html&gt;</span></div><div class=\"line\"><span class=\"string\">        &lt;body id=\"app\"&gt;<span class=\"subst\">$&#123;html&#125;</span>&lt;/body&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;script src=\"/bundle.js\"&gt;&lt;/script&gt;</span></div><div class=\"line\"><span class=\"string\">        `</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>koa-cola render <code>window.__data</code> as redux store serialization after <code>&lt;/body&gt;</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>$&#123;html&#125;<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.__data= &#123;<span class=\"comment\">/*json of redux store*/</span>&#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- bundle js goes after window.__data, only one bundle.js by default, seperate into serveral bundle js if needed --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>if you don't want a particular page to use layout.ts as the page wrapper, you can use decorator &quot;doNotUseLayout&quot; like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>and in this case, you can define the header element and bundle js or other resource like css by using decorator <code>bundle</code> and <code>header</code> like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;header, bundle, doNotUseLayout&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\">@doNotUseLayout</div><div class=\"line\">@bundle([</div><div class=\"line\">  <span class=\"string\">\"/bundle.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"/test.js\"</span></div><div class=\"line\">])</div><div class=\"line\">@header(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;</div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">&#125;)</span></div><div class=\"line\">class Page extends React.Component&lt;Props, States&gt;   &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"default","id":"views-app","title":"app.tsx","prev":"views-pages.html","next":"views-components.html","_content":"\nviews/app.tsx is the entry file of webpack building, you can maintain the file if needed, and in this case it is better to use another file as the entry file, because if you run `koa-cola build` or `koa-cola dev`, will override the file.\n\ncustom your own webpack entry file with store provided like:\n\n```javascript\nconst store = ...\n<Provider store={store} key=\"provider\">\n    <Router history={browserHistory}>\n        <Route ... />\n    </Router>\n</Provider>\n```\n\nif you want to seamlessly use the store initialized by server side, you need to create store with the initial data by `window.__data` rendered by koa-cola:\n```javascript\nconst { ReduxAsyncConnect, asyncConnect, reducer } = require('koa-cola/client');\n// __data is the server side redux store serialization\nconst store = createStore(combineReducers(Object.assign({ reduxAsyncConnect: reducer }, ...custom_reducer))\n    , (window as any).__data);\n```\n\n","source":"views-app.md","raw":"---\nlayout: default\nid: views-app\ntitle: app.tsx\nprev: views-pages.html\nnext: views-components.html\n---\n\nviews/app.tsx is the entry file of webpack building, you can maintain the file if needed, and in this case it is better to use another file as the entry file, because if you run `koa-cola build` or `koa-cola dev`, will override the file.\n\ncustom your own webpack entry file with store provided like:\n\n```javascript\nconst store = ...\n<Provider store={store} key=\"provider\">\n    <Router history={browserHistory}>\n        <Route ... />\n    </Router>\n</Provider>\n```\n\nif you want to seamlessly use the store initialized by server side, you need to create store with the initial data by `window.__data` rendered by koa-cola:\n```javascript\nconst { ReduxAsyncConnect, asyncConnect, reducer } = require('koa-cola/client');\n// __data is the server side redux store serialization\nconst store = createStore(combineReducers(Object.assign({ reduxAsyncConnect: reducer }, ...custom_reducer))\n    , (window as any).__data);\n```\n\n","date":"2017-11-23T08:53:20.679Z","updated":"2017-11-23T08:53:20.679Z","path":"views-app.html","comments":1,"_id":"cjhu90g8j000j5oivlxh01jyd","content":"<p>views/app.tsx is the entry file of webpack building, you can maintain the file if needed, and in this case it is better to use another file as the entry file, because if you run <code>koa-cola build</code> or <code>koa-cola dev</code>, will override the file.</p>\n<p>custom your own webpack entry file with store provided like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = ...</div><div class=\"line\">&lt;Provider store=&#123;store&#125; key=<span class=\"string\">\"provider\"</span>&gt;</div><div class=\"line\">    &lt;Router history=&#123;browserHistory&#125;&gt;</div><div class=\"line\">        &lt;Route ... /&gt;</div><div class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>Provider&gt;</div></pre></td></tr></table></figure>\n<p>if you want to seamlessly use the store initialized by server side, you need to create store with the initial data by <code>window.__data</code> rendered by koa-cola:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; ReduxAsyncConnect, asyncConnect, reducer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"><span class=\"comment\">// __data is the server side redux store serialization</span></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(combineReducers(<span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">reduxAsyncConnect</span>: reducer &#125;, ...custom_reducer))</div><div class=\"line\">    , (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> any).__data);</div></pre></td></tr></table></figure>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>views/app.tsx is the entry file of webpack building, you can maintain the file if needed, and in this case it is better to use another file as the entry file, because if you run <code>koa-cola build</code> or <code>koa-cola dev</code>, will override the file.</p>\n<p>custom your own webpack entry file with store provided like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = ...</div><div class=\"line\">&lt;Provider store=&#123;store&#125; key=<span class=\"string\">\"provider\"</span>&gt;</div><div class=\"line\">    &lt;Router history=&#123;browserHistory&#125;&gt;</div><div class=\"line\">        &lt;Route ... /&gt;</div><div class=\"line\">    &lt;<span class=\"regexp\">/Router&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>Provider&gt;</div></pre></td></tr></table></figure>\n<p>if you want to seamlessly use the store initialized by server side, you need to create store with the initial data by <code>window.__data</code> rendered by koa-cola:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; ReduxAsyncConnect, asyncConnect, reducer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"><span class=\"comment\">// __data is the server side redux store serialization</span></div><div class=\"line\"><span class=\"keyword\">const</span> store = createStore(combineReducers(<span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">reduxAsyncConnect</span>: reducer &#125;, ...custom_reducer))</div><div class=\"line\">    , (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> any).__data);</div></pre></td></tr></table></figure>\n"},{"layout":"default","id":"universal","title":"Universal","prev":"compare-next.html","next":"d-mvc.html","_content":"\n### front end and back end router\n\nkoa-cola auto generate both front end and back end router\n\ncontroller:\n\n```javascript\n@Controller('') \nclass FooController {\n    @Get('/')\n    @View('index')\n    index(@Ctx() ctx) {\n        return '<h1>hello koa-cola !</h1>'\n    }\n}\n```\nreact-router will be auto-generated like this:\n\n```html\n<Router ... >\n    <Route path=\"/\" component={IndexComponent} />\n</Router>\n```\n\nIn server side after react-router match the react component by a specify route, eventually render view html:\n\n```html\n<Provider store={store} key=\"provider\">\n    <MatchReduxComponent />\n</Provider>\n```\n\n\nClient-side will auto match the route and component, and auto render in browser.\n\n```html\n<Provider store={store} key=\"provider\">\n    <Router ... >\n        <Route path=\"/\" component={IndexComponent} />\n    </Router>\n</Provider>\n```\n\n### front end and back end redux\n\nkoa-cola integrates the react-redux in both sides.\n\nreact-redux component:\n\n```javascript\nimport { connect } from 'react-redux'\nconst Index = function({some_props}) {\n    return <h1>Wow koa-cola!</h1>\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Index)\n```\n\nOr use the react-redux base `@Cola` decorator:\n\n```javascript\nconst {Cola} = require('koa-cola/client');\n\n@Cola({\n    initData : {\n        foo : async ({ params, helpers}) => {\n            return await Promise.resolve('this will go to this.props.some_props')\n        }\n    },\n    mapStateToProps,\n    mapDispatchToProps\n})\nclass Index extends React.Component<Props, States>   {\n    constructor(props: Props) {\n        super(props);\n    }\n    render() {\n        return <h1>{this.props.foo}</h1>\n    }\n};\nexport default Index\n```\n\n\nThe client side and server side redux can use the any type of the component that mentioned above, and used in any part of component lifecycle.\n\nHowever, the client side of the redux store will depend on the server side, if the store of server side has been running a series of data stream operations, store data will be saved and as the client side react-redux initial data in `createStore`. (See [redux createStore](http://redux.js.org/docs/api/createStore.html) for detail). So this will magically seamlessly connect the redux data stream from the server side to the client side.\n\n### Reuse react component on front & back ends\n\nthe above mentioned react-router, react-redux and react components can be fully reused on both side ends. Frontend can use all the react component features.\nHowever, we can only use the lifecycle before render on the server side, including:\n\n* constructor()\n* componentWillMount()\n* render()\n\nIf your component will depend on the browser's DOM, and called in the above three lifecycle parts, the server-side render will occur error. So to avoid mistakes, you need to determine the current environment, such as:`if(typeof window != 'undefined')` , Or you can use [simulate browser side scenario](https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md) or something like that.\n\n### http api and fetching\n\nAs mentioned earlier, it's also possible to create your own api classes using the api base class defined by koa-cola and get the data by using the these apis:\n\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\nThe above codes can be run both in server-side and client-side, koa-cola use [axios](https://github.com/mzabriskie/axios) as ajax library.\nFor example:\n\n```javascript\n@Cola({\n    initData : {\n        todosData : async ({ params, helpers, store: { dispatch } }) => {\n            const api = new GetTodoList({});\n            const data = await api.fetch(helpers.ctx);\n            return data.result.result;\n        }\n    }\n})\nclass Page extends React.Component<Props, States> {\n  ...\n}\nexport default Page;\n```\n","source":"universal.md","raw":"---\nlayout: default\nid: universal\ntitle: Universal\nprev: compare-next.html\nnext: d-mvc.html\n---\n\n### front end and back end router\n\nkoa-cola auto generate both front end and back end router\n\ncontroller:\n\n```javascript\n@Controller('') \nclass FooController {\n    @Get('/')\n    @View('index')\n    index(@Ctx() ctx) {\n        return '<h1>hello koa-cola !</h1>'\n    }\n}\n```\nreact-router will be auto-generated like this:\n\n```html\n<Router ... >\n    <Route path=\"/\" component={IndexComponent} />\n</Router>\n```\n\nIn server side after react-router match the react component by a specify route, eventually render view html:\n\n```html\n<Provider store={store} key=\"provider\">\n    <MatchReduxComponent />\n</Provider>\n```\n\n\nClient-side will auto match the route and component, and auto render in browser.\n\n```html\n<Provider store={store} key=\"provider\">\n    <Router ... >\n        <Route path=\"/\" component={IndexComponent} />\n    </Router>\n</Provider>\n```\n\n### front end and back end redux\n\nkoa-cola integrates the react-redux in both sides.\n\nreact-redux component:\n\n```javascript\nimport { connect } from 'react-redux'\nconst Index = function({some_props}) {\n    return <h1>Wow koa-cola!</h1>\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Index)\n```\n\nOr use the react-redux base `@Cola` decorator:\n\n```javascript\nconst {Cola} = require('koa-cola/client');\n\n@Cola({\n    initData : {\n        foo : async ({ params, helpers}) => {\n            return await Promise.resolve('this will go to this.props.some_props')\n        }\n    },\n    mapStateToProps,\n    mapDispatchToProps\n})\nclass Index extends React.Component<Props, States>   {\n    constructor(props: Props) {\n        super(props);\n    }\n    render() {\n        return <h1>{this.props.foo}</h1>\n    }\n};\nexport default Index\n```\n\n\nThe client side and server side redux can use the any type of the component that mentioned above, and used in any part of component lifecycle.\n\nHowever, the client side of the redux store will depend on the server side, if the store of server side has been running a series of data stream operations, store data will be saved and as the client side react-redux initial data in `createStore`. (See [redux createStore](http://redux.js.org/docs/api/createStore.html) for detail). So this will magically seamlessly connect the redux data stream from the server side to the client side.\n\n### Reuse react component on front & back ends\n\nthe above mentioned react-router, react-redux and react components can be fully reused on both side ends. Frontend can use all the react component features.\nHowever, we can only use the lifecycle before render on the server side, including:\n\n* constructor()\n* componentWillMount()\n* render()\n\nIf your component will depend on the browser's DOM, and called in the above three lifecycle parts, the server-side render will occur error. So to avoid mistakes, you need to determine the current environment, such as:`if(typeof window != 'undefined')` , Or you can use [simulate browser side scenario](https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md) or something like that.\n\n### http api and fetching\n\nAs mentioned earlier, it's also possible to create your own api classes using the api base class defined by koa-cola and get the data by using the these apis:\n\n```javascript\nconst api = new GetTodoList({});\nconst data = await api.fetch(helpers.ctx);\n```\n\nThe above codes can be run both in server-side and client-side, koa-cola use [axios](https://github.com/mzabriskie/axios) as ajax library.\nFor example:\n\n```javascript\n@Cola({\n    initData : {\n        todosData : async ({ params, helpers, store: { dispatch } }) => {\n            const api = new GetTodoList({});\n            const data = await api.fetch(helpers.ctx);\n            return data.result.result;\n        }\n    }\n})\nclass Page extends React.Component<Props, States> {\n  ...\n}\nexport default Page;\n```\n","date":"2017-11-23T08:51:14.863Z","updated":"2017-11-23T08:51:14.863Z","path":"universal.html","comments":1,"_id":"cjhu90g8j000k5oiv126tfap6","content":"<h3>front end and back end router</h3>\n<p>koa-cola auto generate both front end and back end router</p>\n<p>controller:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/'</span>)</div><div class=\"line\">    @View(<span class=\"string\">'index'</span>)</div><div class=\"line\">    index(@Ctx() ctx) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello koa-cola !&lt;/h1&gt;'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>react-router will be auto-generated like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>In server side after react-router match the react component by a specify route, eventually render view html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">MatchReduxComponent</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Client-side will auto match the route and component, and auto render in browser.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3>front end and back end redux</h3>\n<p>koa-cola integrates the react-redux in both sides.</p>\n<p>react-redux component:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Wow koa-cola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<p>Or use the react-redux base <code>@Cola</code> decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;Cola&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        foo : <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'this will go to this.props.some_props'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<p>The client side and server side redux can use the any type of the component that mentioned above, and used in any part of component lifecycle.</p>\n<p>However, the client side of the redux store will depend on the server side, if the store of server side has been running a series of data stream operations, store data will be saved and as the client side react-redux initial data in <code>createStore</code>. (See <a href=\"http://redux.js.org/docs/api/createStore.html\" target=\"_blank\" rel=\"external\">redux createStore</a> for detail). So this will magically seamlessly connect the redux data stream from the server side to the client side.</p>\n<h3>Reuse react component on front &amp; back ends</h3>\n<p>the above mentioned react-router, react-redux and react components can be fully reused on both side ends. Frontend can use all the react component features.<br>\nHowever, we can only use the lifecycle before render on the server side, including:</p>\n<ul>\n<li>constructor()</li>\n<li>componentWillMount()</li>\n<li>render()</li>\n</ul>\n<p>If your component will depend on the browser's DOM, and called in the above three lifecycle parts, the server-side render will occur error. So to avoid mistakes, you need to determine the current environment, such as:<code>if(typeof window != 'undefined')</code> , Or you can use <a href=\"https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md\" target=\"_blank\" rel=\"external\">simulate browser side scenario</a> or something like that.</p>\n<h3>http api and fetching</h3>\n<p>As mentioned earlier, it's also possible to create your own api classes using the api base class defined by koa-cola and get the data by using the these apis:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p>The above codes can be run both in server-side and client-side, koa-cola use <a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios</a> as ajax library.<br>\nFor example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        todosData : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">            <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Page;</div></pre></td></tr></table></figure>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<h3>front end and back end router</h3>\n<p>koa-cola auto generate both front end and back end router</p>\n<p>controller:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller(<span class=\"string\">''</span>) </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\">    @Get(<span class=\"string\">'/'</span>)</div><div class=\"line\">    @View(<span class=\"string\">'index'</span>)</div><div class=\"line\">    index(@Ctx() ctx) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello koa-cola !&lt;/h1&gt;'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>react-router will be auto-generated like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>In server side after react-router match the react component by a specify route, eventually render view html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">MatchReduxComponent</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Client-side will auto match the route and component, and auto render in browser.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">\"provider\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;IndexComponent&#125;</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3>front end and back end redux</h3>\n<p>koa-cola integrates the react-redux in both sides.</p>\n<p>react-redux component:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;some_props&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Wow koa-cola!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">)(Index)</div></pre></td></tr></table></figure>\n<p>Or use the react-redux base <code>@Cola</code> decorator:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;Cola&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        foo : <span class=\"keyword\">async</span> (&#123; params, helpers&#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'this will go to this.props.some_props'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mapStateToProps,</div><div class=\"line\">    mapDispatchToProps</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt;   </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Index</div></pre></td></tr></table></figure>\n<p>The client side and server side redux can use the any type of the component that mentioned above, and used in any part of component lifecycle.</p>\n<p>However, the client side of the redux store will depend on the server side, if the store of server side has been running a series of data stream operations, store data will be saved and as the client side react-redux initial data in <code>createStore</code>. (See <a href=\"http://redux.js.org/docs/api/createStore.html\" target=\"_blank\" rel=\"external\">redux createStore</a> for detail). So this will magically seamlessly connect the redux data stream from the server side to the client side.</p>\n<h3>Reuse react component on front &amp; back ends</h3>\n<p>the above mentioned react-router, react-redux and react components can be fully reused on both side ends. Frontend can use all the react component features.<br>\nHowever, we can only use the lifecycle before render on the server side, including:</p>\n<ul>\n<li>constructor()</li>\n<li>componentWillMount()</li>\n<li>render()</li>\n</ul>\n<p>If your component will depend on the browser's DOM, and called in the above three lifecycle parts, the server-side render will occur error. So to avoid mistakes, you need to determine the current environment, such as:<code>if(typeof window != 'undefined')</code> , Or you can use <a href=\"https://github.com/airbnb/enzyme/blob/master/docs/guides/jsdom.md\" target=\"_blank\" rel=\"external\">simulate browser side scenario</a> or something like that.</p>\n<h3>http api and fetching</h3>\n<p>As mentioned earlier, it's also possible to create your own api classes using the api base class defined by koa-cola and get the data by using the these apis:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div></pre></td></tr></table></figure>\n<p>The above codes can be run both in server-side and client-side, koa-cola use <a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios</a> as ajax library.<br>\nFor example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Cola(&#123;</div><div class=\"line\">    initData : &#123;</div><div class=\"line\">        todosData : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> api = <span class=\"keyword\">new</span> GetTodoList(&#123;&#125;);</div><div class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> api.fetch(helpers.ctx);</div><div class=\"line\">            <span class=\"keyword\">return</span> data.result.result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Page;</div></pre></td></tr></table></figure>\n"},{"layout":"default","id":"tip1-react-init","title":"React component data initialization","next":"tip2-redux.html","_content":"\nkoa-cola Use Cola decorator's components to initialize data\n\n```javascript\nconst {Cola} = require('koa-cola/client');\n\n// Variable Description\nexport interface Props {\n    foo: string;   \n}\nexport interface States {}\n\n@Cola({\n  initData : {\n    foo : async ({ params, helpers, store: { dispatch } }) => {\n        return await Promise.resolve('bar');\n    }\n  }\n})\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>{this.props.foo}</div>;\n  }\n}\nexport default Some_Page;\n```\n","source":"tip1-react-init.md","raw":"---\nlayout: default\nid: tip1-react-init\ntitle: React component data initialization\nnext: tip2-redux.html\n---\n\nkoa-cola Use Cola decorator's components to initialize data\n\n```javascript\nconst {Cola} = require('koa-cola/client');\n\n// Variable Description\nexport interface Props {\n    foo: string;   \n}\nexport interface States {}\n\n@Cola({\n  initData : {\n    foo : async ({ params, helpers, store: { dispatch } }) => {\n        return await Promise.resolve('bar');\n    }\n  }\n})\nclass Some_Page extends React.Component<Props, States> {\n  constructor(props: Props) {\n    super(props);\n  }\n  render() {\n    return <div>{this.props.foo}</div>;\n  }\n}\nexport default Some_Page;\n```\n","date":"2018-05-31T07:52:52.035Z","updated":"2018-05-31T07:52:52.035Z","path":"tip1-react-init.html","comments":1,"_id":"cjhu90g8k000l5oivt50221eb","content":"<p>koa-cola Use Cola decorator's components to initialize data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;Cola&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Variable Description</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface Props &#123;</div><div class=\"line\">    foo: string;   </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> interface States &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    foo : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola Use Cola decorator's components to initialize data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123;Cola&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-cola/client'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Variable Description</span></div><div class=\"line\"><span class=\"keyword\">export</span> interface Props &#123;</div><div class=\"line\">    foo: string;   </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> interface States &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">@Cola(&#123;</div><div class=\"line\">  initData : &#123;</div><div class=\"line\">    foo : <span class=\"keyword\">async</span> (&#123; params, helpers, <span class=\"attr\">store</span>: &#123; dispatch &#125; &#125;) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Some_Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>, <span class=\"title\">States</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props: Props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Some_Page;</div></pre></td></tr></table></figure>\n"},{"layout":"default","id":"views-components","title":"components","prev":"views-app.html","_content":"\n\nviews/components place react component files by convention.","source":"views-components.md","raw":"---\nlayout: default\nid: views-components\ntitle: components\nprev: views-app.html\n---\n\n\nviews/components place react component files by convention.","date":"2017-11-23T08:53:22.980Z","updated":"2017-11-23T08:53:22.980Z","path":"views-components.html","comments":1,"_id":"cjhu90g8l000m5oiv2knqwhi9","content":"<p>views/components place react component files by convention.</p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>views/components place react component files by convention.</p>\n"},{"layout":"default","id":"views","title":"views","prev":"config/env.html","next":"views-pages.html","_content":"\n`views` is the place for [pages](/views-pages.html), [components](/views-components.html), [app.tsx](/views-app.html) and layout.ts\n","source":"views.md","raw":"---\nlayout: default\nid: views\ntitle: views\nprev: config/env.html\nnext: views-pages.html\n---\n\n`views` is the place for [pages](/views-pages.html), [components](/views-components.html), [app.tsx](/views-app.html) and layout.ts\n","date":"2017-11-23T08:53:38.837Z","updated":"2017-11-23T08:53:38.837Z","path":"views.html","comments":1,"_id":"cjhu90g8m000n5oivmnxwfhdg","content":"<p><code>views</code> is the place for <a href=\"/views-pages.html\">pages</a>, <a href=\"/views-components.html\">components</a>, <a href=\"/views-app.html\">app.tsx</a> and layout.ts</p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p><code>views</code> is the place for <a href=\"/views-pages.html\">pages</a>, <a href=\"/views-components.html\">components</a>, <a href=\"/views-app.html\">app.tsx</a> and layout.ts</p>\n"},{"_content":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n","source":"css/github-markdown.css","raw":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n","date":"2017-10-10T09:46:49.719Z","updated":"2017-08-11T08:48:37.876Z","path":"css/github-markdown.css","layout":"false","title":"","comments":1,"_id":"cjhu90g8p000o5oivdng8uku7","content":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format('woff');\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  line-height: 1.5;\n  color: #24292e;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .pl-c {\n  color: #6a737d;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #005cc5;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #6f42c1;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292e;\n}\n\n.markdown-body .pl-ent {\n  color: #22863a;\n}\n\n.markdown-body .pl-k {\n  color: #d73a49;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #032f62;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #e36209;\n}\n\n.markdown-body .pl-bu {\n  color: #b31d28;\n}\n\n.markdown-body .pl-ii {\n  color: #fafbfc;\n  background-color: #b31d28;\n}\n\n.markdown-body .pl-c2 {\n  color: #fafbfc;\n  background-color: #d73a49;\n}\n\n.markdown-body .pl-c2::before {\n  content: \"^M\";\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #22863a;\n}\n\n.markdown-body .pl-ml {\n  color: #735c0f;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #005cc5;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292e;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292e;\n}\n\n.markdown-body .pl-md {\n  color: #b31d28;\n  background-color: #ffeef0;\n}\n\n.markdown-body .pl-mi1 {\n  color: #22863a;\n  background-color: #f0fff4;\n}\n\n.markdown-body .pl-mc {\n  color: #e36209;\n  background-color: #ffebda;\n}\n\n.markdown-body .pl-mi2 {\n  color: #f6f8fa;\n  background-color: #005cc5;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #6f42c1;\n}\n\n.markdown-body .pl-ba {\n  color: #586069;\n}\n\n.markdown-body .pl-sg {\n  color: #959da5;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #032f62;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  vertical-align: text-top;\n  fill: currentColor;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body strong {\n  font-weight: inherit;\n}\n\n.markdown-body strong {\n  font-weight: bolder;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border-style: none;\n}\n\n.markdown-body svg:not(:root) {\n  overflow: hidden;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body input {\n  overflow: visible;\n}\n\n.markdown-body [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body * {\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body h1 {\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.markdown-body h2 {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.markdown-body h3 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.markdown-body h4 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.markdown-body h5 {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.markdown-body h6 {\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code {\n  font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n}\n\n.markdown-body .octicon {\n  vertical-align: text-bottom;\n}\n\n.markdown-body .pl-0 {\n  padding-left: 0 !important;\n}\n\n.markdown-body .pl-1 {\n  padding-left: 4px !important;\n}\n\n.markdown-body .pl-2 {\n  padding-left: 8px !important;\n}\n\n.markdown-body .pl-3 {\n  padding-left: 16px !important;\n}\n\n.markdown-body .pl-4 {\n  padding-left: 24px !important;\n}\n\n.markdown-body .pl-5 {\n  padding-left: 32px !important;\n}\n\n.markdown-body .pl-6 {\n  padding-left: 40px !important;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #e1e4e8;\n  border: 0;\n}\n\n.markdown-body blockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #dfe2e5;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font-size: 11px;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid #eaecef;\n}\n\n.markdown-body h3 {\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-size: 0.875em;\n}\n\n.markdown-body h6 {\n  font-size: 0.85em;\n  color: #6a737d;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #dfe2e5;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #fff;\n}\n\n.markdown-body code {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(27,31,35,0.05);\n  border-radius: 3px;\n}\n\n.markdown-body code::before,\n.markdown-body code::after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 3px;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code::before,\n.markdown-body pre code::after {\n  content: normal;\n}\n\n.markdown-body .full-commit .btn-outline:not(:disabled):hover {\n  color: #005cc5;\n  border-color: #005cc5;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  line-height: 10px;\n  color: #444d56;\n  vertical-align: middle;\n  background-color: #fafbfc;\n  border: solid 1px #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n}\n\n.markdown-body :checked+.radio-label {\n  position: relative;\n  z-index: 1;\n  border-color: #0366d6;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body hr {\n  border-bottom-color: #eee;\n}\n"},{"layout":"default","id":"cli","title":"Cli commander","prev":"installation.html","_content":"\nkoa-cola provides some useful cli commands, include creating a new project, launching a project, and generating a model schema file.\n\n### Create a koa-cola project\n\nnew koa-cola project:\n\n```shell\nkoa-cola new app\n```\n or \n```shell\nkoa-cola n app\n```\nthe project will install dependencies, build bundle, and launch the app automatically.\n\n### launch App\n\nTo launch the project:\n ```shell\n npm run local\n ```\n\nTo start as development mode, build webpack bundle, launch project, and watch files automatically:\n```shell\nnpm run dev\n```\n\n### build bundle\n\nTo run a watch command:\n```shell\nnpm run watch\n```\nthe watch action will find the controllers, and through which to find the views, finally create Provider of redux by these views and reducer of them. This Provider is the entry of the webapck build js bundle.\n\n**Note: This will overwrite your `view/app.tsx`**\n\nIf you want a 'homemade' `app.tsx` , you need to run the `webpack` command instead of `koa-cola watch`.\n\n### Create model schema file\n\nRun `koa-cola schema` or `koa-cola s` to create definition of model schema inside `api/schenmas`. \nfile will save as `typings/schema.ts`.\n\n","source":"cli.md","raw":"---\nlayout: default\nid: cli\ntitle: Cli commander\nprev: installation.html\n---\n\nkoa-cola provides some useful cli commands, include creating a new project, launching a project, and generating a model schema file.\n\n### Create a koa-cola project\n\nnew koa-cola project:\n\n```shell\nkoa-cola new app\n```\n or \n```shell\nkoa-cola n app\n```\nthe project will install dependencies, build bundle, and launch the app automatically.\n\n### launch App\n\nTo launch the project:\n ```shell\n npm run local\n ```\n\nTo start as development mode, build webpack bundle, launch project, and watch files automatically:\n```shell\nnpm run dev\n```\n\n### build bundle\n\nTo run a watch command:\n```shell\nnpm run watch\n```\nthe watch action will find the controllers, and through which to find the views, finally create Provider of redux by these views and reducer of them. This Provider is the entry of the webapck build js bundle.\n\n**Note: This will overwrite your `view/app.tsx`**\n\nIf you want a 'homemade' `app.tsx` , you need to run the `webpack` command instead of `koa-cola watch`.\n\n### Create model schema file\n\nRun `koa-cola schema` or `koa-cola s` to create definition of model schema inside `api/schenmas`. \nfile will save as `typings/schema.ts`.\n\n","date":"2018-05-31T07:58:42.769Z","updated":"2018-05-31T07:58:42.769Z","path":"cli.html","comments":1,"_id":"cjhu90g8w000p5oivu94zz8hi","content":"<p>koa-cola provides some useful cli commands, include creating a new project, launching a project, and generating a model schema file.</p>\n<h3>Create a koa-cola project</h3>\n<p>new koa-cola project:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">koa-cola new app</div></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">koa-cola n app</div></pre></td></tr></table></figure>\n<p>the project will install dependencies, build bundle, and launch the app automatically.</p>\n<h3>launch App</h3>\n<p>To launch the project:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run local</div></pre></td></tr></table></figure>\n<p>To start as development mode, build webpack bundle, launch project, and watch files automatically:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h3>build bundle</h3>\n<p>To run a watch command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run watch</div></pre></td></tr></table></figure>\n<p>the watch action will find the controllers, and through which to find the views, finally create Provider of redux by these views and reducer of them. This Provider is the entry of the webapck build js bundle.</p>\n<p><strong>Note: This will overwrite your <code>view/app.tsx</code></strong></p>\n<p>If you want a 'homemade' <code>app.tsx</code> , you need to run the <code>webpack</code> command instead of <code>koa-cola watch</code>.</p>\n<h3>Create model schema file</h3>\n<p>Run <code>koa-cola schema</code> or <code>koa-cola s</code> to create definition of model schema inside <code>api/schenmas</code>.<br>\nfile will save as <code>typings/schema.ts</code>.</p>\n","site":{"data":{"nav":[{"title":"Introduction","items":[{"id":"index","title":"What is koa-cola?"},{"id":"ssr","title":"SSR & SPA"},{"id":"compare-next","title":"Compare with next.js"},{"id":"universal","title":"Universal"},{"id":"d-mvc","title":"MVC pattern with decorator"}]},{"title":"Overview","items":[{"id":"installation","title":"Getting Started"},{"id":"decorators","title":"Decorators"},{"id":"cli","title":"Cli commander"}]},{"title":"Online demo","items":[{"id":"demo-todolist","href":"http://www.koa-cola.com:3000","title":"Todolist example"}]},{"title":"Tips","items":[{"id":"tip1-react-init","title":"React component data initialization"},{"id":"tip2-redux","title":"Using redux in Cola"},{"id":"tip3-inject-global","title":"Inject global"},{"id":"tip4-cluster","title":"Cluster mode"},{"id":"tip5-debug","title":"Debugging"},{"id":"tip6-compile","title":"Compiling"}]},{"title":"Project construction","items":[{"id":"api","title":"api","items":[{"id":"api-controllers","title":"controllers"},{"id":"api-models","title":"models"},{"id":"api-schemas","title":"schemas"},{"id":"api-responses","title":"responses"}]},{"id":"config","title":"config"},{"id":"public","title":"public"},{"id":"views","title":"views","items":[{"id":"views-pages","title":"pages"},{"id":"views-app","title":"app.tsx"},{"id":"views-components","title":"components"}]}]}]}},"excerpt":"","more":"<p>koa-cola provides some useful cli commands, include creating a new project, launching a project, and generating a model schema file.</p>\n<h3>Create a koa-cola project</h3>\n<p>new koa-cola project:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">koa-cola new app</div></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">koa-cola n app</div></pre></td></tr></table></figure>\n<p>the project will install dependencies, build bundle, and launch the app automatically.</p>\n<h3>launch App</h3>\n<p>To launch the project:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run local</div></pre></td></tr></table></figure>\n<p>To start as development mode, build webpack bundle, launch project, and watch files automatically:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h3>build bundle</h3>\n<p>To run a watch command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run watch</div></pre></td></tr></table></figure>\n<p>the watch action will find the controllers, and through which to find the views, finally create Provider of redux by these views and reducer of them. This Provider is the entry of the webapck build js bundle.</p>\n<p><strong>Note: This will overwrite your <code>view/app.tsx</code></strong></p>\n<p>If you want a 'homemade' <code>app.tsx</code> , you need to run the <code>webpack</code> command instead of <code>koa-cola watch</code>.</p>\n<h3>Create model schema file</h3>\n<p>Run <code>koa-cola schema</code> or <code>koa-cola s</code> to create definition of model schema inside <code>api/schenmas</code>.<br>\nfile will save as <code>typings/schema.ts</code>.</p>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}